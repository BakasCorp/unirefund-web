name: Auto Deploy on Release
run-name: 🚀 Auto deploying release

on:
  release:
    types: [created] # runs when a release is first created

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.env-check.outputs.env }}
      app: ${{ steps.env-check.outputs.app }}
      should-deploy: ${{ steps.env-check.outputs.should-deploy }}
    steps:
      - name: Determine environment and app from release tag
        id: env-check
        run: |
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          echo "📝 Release tag: $RELEASE_TAG"

          ENV=""
          APP=""
          SHOULD_DEPLOY="false"

          # Determine environment from tag prefix
          if [[ "$RELEASE_TAG" =~ ^uat-.* ]]; then
            ENV="uat"
            SHOULD_DEPLOY="true"
            echo "✅ UAT deployment detected from release tag"
          elif [[ "$RELEASE_TAG" =~ ^prod-.* ]]; then
            ENV="prod"
            SHOULD_DEPLOY="true"
            echo "✅ PROD deployment detected from release tag"
          else
            echo "❌ Cannot determine environment from release tag"
            echo "   Expected formats:"
            echo "   - uat-v1.0.0"
            echo "   - prod-v1.0.0"
          fi

          # Determine app type from tag (default web)
          if [[ "$RELEASE_TAG" =~ ssr ]]; then
            APP="ssr"
            echo "📦 SSR app detected from tag"
          else
            APP="web"
            echo "📦 Web app selected (default)"
          fi

          echo "env=$ENV" >> $GITHUB_OUTPUT
          echo "app=$APP" >> $GITHUB_OUTPUT
          echo "should-deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT

          echo ""
          echo "🎯 Deployment Summary:"
          echo "   Environment: $ENV"
          echo "   App: $APP"
          echo "   Should Deploy: $SHOULD_DEPLOY"

  deploy:
    needs: determine-environment
    runs-on: self-hosted
    timeout-minutes: 60
    if: needs.determine-environment.outputs.should-deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.env }}
    steps:
      - name: Show deployment context
        run: |
          echo "🎉 Auto deployment triggered by release"
          echo "📝 Release tag: ${{ github.event.release.tag_name }}"
          echo "🌍 Environment: ${{ needs.determine-environment.outputs.env }}"
          echo "📦 App: ${{ needs.determine-environment.outputs.app }}"
          echo "👤 Released by: ${{ github.event.release.author.login }}"
          echo "🔗 Release URL: ${{ github.event.release.html_url }}"

      - name: Checkout release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
          fetch-depth: 0

      - name: Deploy app
        run: |
          ssh frontend "deploy Unirefund  ${{ github.event.release.tag_name }} ${{ needs.determine-environment.outputs.app }}"

  notify-skipped:
    needs: determine-environment
    runs-on: ubuntu-latest
    if: needs.determine-environment.outputs.should-deploy == 'false'
    steps:
      - run: |
          echo "⏭️  Deployment skipped for release: ${{ github.event.release.tag_name }}"
          echo "💡 To enable auto-deployment, name the release tag like:"
          echo "   uat-v1.0.0"
          echo "   prod-v1.0.0"
          echo "::error::Deployment was skipped due to invalid release tag format"
          exit 1
