name: Unirefund Development Deploy
run-name: üöÄ ${{ github.actor }} is deploying [${{ inputs.env }}] Unirefund-${{ inputs.app }}
on:
  workflow_dispatch:
    inputs:
      env:
        description: "Release type dev"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
      app:
        description: "App to publish (web or ssr)"
        required: true
        default: "web"
        type: choice
        options:
          - web
          - ssr
jobs:
  publish:
    runs-on: self-hosted
    timeout-minutes: 60
    # ‚úÖ Activates GitHub Environment for secrets/vars
    environment: ${{ inputs.env }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper tagging

      - name: Show build context
        run: |
          echo "üéâ Triggered by: ${{ github.actor }}"
          echo "üåç Environment: ${{ inputs.env }}"
          echo "üì¶ App: ${{ inputs.app }}"
          echo "üñ•Ô∏è  OS: ${{ runner.os }}"
          echo "üîÅ Branch: ${{ github.ref_name }}"

      - name: Deploy via SSH
        env:
          SSH_COMMAND: |
            deploy Unirefund ${{inputs.env}} ${{inputs.app}}
        run: |
          echo "Running remote deploy command..."
          ssh frontend "${SSH_COMMAND}"

      - name: Generate next version tag
        id: tag_name
        run: |
          # Get the latest version from any environment and app tag
          LATEST_TAG=$(git tag -l "*-v*.*.*-*" | sed 's/^[^-]*-\(v[0-9]*\.[0-9]*\.[0-9]*\)-.*$/\1/' | sort -V | tail -n1)

          if [ -z "$LATEST_TAG" ]; then
            # No existing tags, start with v0.0.1
            NEW_VERSION="v0.0.1"
            echo "üè∑Ô∏è  No existing tags found, starting with: ${NEW_VERSION}"
          else
            echo "üìã Latest version found: ${LATEST_TAG}"
            
            # Extract version numbers (remove 'v' prefix)
            VERSION=${LATEST_TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
            
            # Increment patch version
            PATCH=$((PATCH + 1))
            NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
            echo "üè∑Ô∏è  Generated next version: ${NEW_VERSION}"
          fi

          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: Create and push tags
        if: success() # Only run if previous steps succeeded
        run: |
          # Configure Git (use GitHub token for authentication)
          git config --local user.email "${{ github.actor }}@users.noreply.github.com"
          git config --local user.name "${{ github.actor }}"

          # Get the version and app from previous steps
          VERSION="${{ steps.tag_name.outputs.version }}"
          APP="${{ inputs.app }}"

          # Create both UAT and PROD tags with app suffix
          UAT_TAG="uat-${VERSION}-${APP}"
          PROD_TAG="prod-${VERSION}-${APP}"

          # Create UAT tag
          git tag -a "${UAT_TAG}" -m "Release ${UAT_TAG} for ${{ inputs.app }} app - deployed by ${{ github.actor }}"

          # Create PROD tag  
          git tag -a "${PROD_TAG}" -m "Release ${PROD_TAG} for ${{ inputs.app }} app - deployed by ${{ github.actor }}"

          # Push both tags
          git push origin "${UAT_TAG}"
          git push origin "${PROD_TAG}"

          echo "‚úÖ Successfully created and pushed tags: ${UAT_TAG}, ${PROD_TAG}"
