// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { PostApiCrmServiceAdminarealevel1Data, PostApiCrmServiceAdminarealevel1Response, DeleteApiCrmServiceAdminarealevel1ByAdminAreaLevel1IdData, DeleteApiCrmServiceAdminarealevel1ByAdminAreaLevel1IdResponse, GetApiCrmServiceAdminarealevel1ByAdminAreaLevel1IdData, GetApiCrmServiceAdminarealevel1ByAdminAreaLevel1IdResponse, PutApiCrmServiceAdminarealevel1ByAdminAreaLevel1IdData, PutApiCrmServiceAdminarealevel1ByAdminAreaLevel1IdResponse, GetApiCrmServiceAdminarealevel1ByCountryByCountryIdData, GetApiCrmServiceAdminarealevel1ByCountryByCountryIdResponse, PostApiCrmServiceAdminarealevel2Data, PostApiCrmServiceAdminarealevel2Response, DeleteApiCrmServiceAdminarealevel2ByAdminAreaLevel2IdData, DeleteApiCrmServiceAdminarealevel2ByAdminAreaLevel2IdResponse, GetApiCrmServiceAdminarealevel2ByAdminAreaLevel2IdData, GetApiCrmServiceAdminarealevel2ByAdminAreaLevel2IdResponse, PutApiCrmServiceAdminarealevel2ByAdminAreaLevel2IdData, PutApiCrmServiceAdminarealevel2ByAdminAreaLevel2IdResponse, GetApiCrmServiceAdminarealevel2ByAdminarealevel1ByAdminAreaLevel1IdData, GetApiCrmServiceAdminarealevel2ByAdminarealevel1ByAdminAreaLevel1IdResponse, PostApiCrmServiceCountriesData, PostApiCrmServiceCountriesResponse, GetApiCrmServiceCountriesResponse, DeleteApiCrmServiceCountriesByCountryIdData, DeleteApiCrmServiceCountriesByCountryIdResponse, GetApiCrmServiceCountriesByCountryIdData, GetApiCrmServiceCountriesByCountryIdResponse, PutApiCrmServiceCountriesByCountryIdData, PutApiCrmServiceCountriesByCountryIdResponse, PostApiCrmServiceCustomsData, PostApiCrmServiceCustomsResponse, GetApiCrmServiceCustomsData, GetApiCrmServiceCustomsResponse, PostApiCrmServiceCustomsByCustomIdAffiliationsData, PostApiCrmServiceCustomsByCustomIdAffiliationsResponse, GetApiCrmServiceCustomsByCustomIdAffiliationsData, GetApiCrmServiceCustomsByCustomIdAffiliationsResponse, DeleteApiCrmServiceCustomsByCustomIdData, DeleteApiCrmServiceCustomsByCustomIdResponse, GetApiCrmServiceCustomsByCustomIdData, GetApiCrmServiceCustomsByCustomIdResponse, PutApiCrmServiceCustomsByCustomIdData, PutApiCrmServiceCustomsByCustomIdResponse, DeleteApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationIdData, DeleteApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationIdResponse, PutApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationIdData, PutApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationIdResponse, GetApiCrmServiceCustomsByCustomIdAddressesData, GetApiCrmServiceCustomsByCustomIdAddressesResponse, PutApiCrmServiceCustomsByCustomIdAddressesData, PutApiCrmServiceCustomsByCustomIdAddressesResponse, GetApiCrmServiceCustomsByCustomIdEmailsData, GetApiCrmServiceCustomsByCustomIdEmailsResponse, PutApiCrmServiceCustomsByCustomIdEmailsData, PutApiCrmServiceCustomsByCustomIdEmailsResponse, GetApiCrmServiceCustomsByCustomIdSubCustomsData, GetApiCrmServiceCustomsByCustomIdSubCustomsResponse, GetApiCrmServiceCustomsByCustomIdTelephonesData, GetApiCrmServiceCustomsByCustomIdTelephonesResponse, PutApiCrmServiceCustomsByCustomIdTelephonesData, PutApiCrmServiceCustomsByCustomIdTelephonesResponse, PostApiCrmServiceIndividualsData, PostApiCrmServiceIndividualsResponse, GetApiCrmServiceIndividualsData, GetApiCrmServiceIndividualsResponse, GetApiCrmServiceIndividualsByIndividualIdData, GetApiCrmServiceIndividualsByIndividualIdResponse, PutApiCrmServiceIndividualsByIndividualIdData, PutApiCrmServiceIndividualsByIndividualIdResponse, DeleteApiCrmServiceIndividualsByIndividualIdData, DeleteApiCrmServiceIndividualsByIndividualIdResponse, PutApiCrmServiceIndividualsByIndividualIdTelephonesData, PutApiCrmServiceIndividualsByIndividualIdTelephonesResponse, GetApiCrmServiceIndividualsByIndividualIdTelephonesData, GetApiCrmServiceIndividualsByIndividualIdTelephonesResponse, PutApiCrmServiceIndividualsByIndividualIdEmailsData, PutApiCrmServiceIndividualsByIndividualIdEmailsResponse, GetApiCrmServiceIndividualsByIndividualIdEmailsData, GetApiCrmServiceIndividualsByIndividualIdEmailsResponse, PutApiCrmServiceIndividualsByIndividualIdAddressesData, PutApiCrmServiceIndividualsByIndividualIdAddressesResponse, GetApiCrmServiceIndividualsByIndividualIdAddressesData, GetApiCrmServiceIndividualsByIndividualIdAddressesResponse, GetApiCrmServiceIndividualsByEmailData, GetApiCrmServiceIndividualsByEmailResponse, GetApiCrmServiceMerchantsByMerchantIdData, GetApiCrmServiceMerchantsByMerchantIdResponse, PutApiCrmServiceMerchantsByMerchantIdData, PutApiCrmServiceMerchantsByMerchantIdResponse, DeleteApiCrmServiceMerchantsByMerchantIdData, DeleteApiCrmServiceMerchantsByMerchantIdResponse, GetApiCrmServiceMerchantsByMerchantIdSubMerchantsData, GetApiCrmServiceMerchantsByMerchantIdSubMerchantsResponse, GetApiCrmServiceMerchantsByMerchantIdAffiliationsData, GetApiCrmServiceMerchantsByMerchantIdAffiliationsResponse, PostApiCrmServiceMerchantsByMerchantIdAffiliationsData, PostApiCrmServiceMerchantsByMerchantIdAffiliationsResponse, DeleteApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationIdData, DeleteApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationIdResponse, PutApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationIdData, PutApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationIdResponse, PostApiCrmServiceMerchantsBulkProductGroupMerchantsData, PostApiCrmServiceMerchantsBulkProductGroupMerchantsResponse, GetApiCrmServiceMerchantsByMerchantIdProductGroupData, GetApiCrmServiceMerchantsByMerchantIdProductGroupResponse, PostApiCrmServiceMerchantsByMerchantIdProductGroupsData, PostApiCrmServiceMerchantsByMerchantIdProductGroupsResponse, DeleteApiCrmServiceMerchantsByMerchantIdProductGroupsData, DeleteApiCrmServiceMerchantsByMerchantIdProductGroupsResponse, PostApiCrmServiceMerchantsByMerchantIdProductGroupByProductGroupIdDefaultData, PostApiCrmServiceMerchantsByMerchantIdProductGroupByProductGroupIdDefaultResponse, PostApiCrmServiceMerchantsData, PostApiCrmServiceMerchantsResponse, GetApiCrmServiceMerchantsData, GetApiCrmServiceMerchantsResponse, PutApiCrmServiceMerchantsByMerchantIdTelephonesData, PutApiCrmServiceMerchantsByMerchantIdTelephonesResponse, GetApiCrmServiceMerchantsByMerchantIdTelephonesData, GetApiCrmServiceMerchantsByMerchantIdTelephonesResponse, PutApiCrmServiceMerchantsByMerchantIdEmailsData, PutApiCrmServiceMerchantsByMerchantIdEmailsResponse, GetApiCrmServiceMerchantsByMerchantIdEmailsData, GetApiCrmServiceMerchantsByMerchantIdEmailsResponse, PutApiCrmServiceMerchantsByMerchantIdAddressesData, PutApiCrmServiceMerchantsByMerchantIdAddressesResponse, GetApiCrmServiceMerchantsByMerchantIdAddressesData, GetApiCrmServiceMerchantsByMerchantIdAddressesResponse, PostApiCrmServiceNeighborhoodsData, PostApiCrmServiceNeighborhoodsResponse, DeleteApiCrmServiceNeighborhoodsByNeighborhoodIdData, DeleteApiCrmServiceNeighborhoodsByNeighborhoodIdResponse, PutApiCrmServiceNeighborhoodsByNeighborhoodIdData, PutApiCrmServiceNeighborhoodsByNeighborhoodIdResponse, GetApiCrmServiceNeighborhoodsByAdminarealevel2ByAdminAreaLevel2IdData, GetApiCrmServiceNeighborhoodsByAdminarealevel2ByAdminAreaLevel2IdResponse, PostApiCrmServiceRefundpointsData, PostApiCrmServiceRefundpointsResponse, GetApiCrmServiceRefundpointsData, GetApiCrmServiceRefundpointsResponse, PostApiCrmServiceRefundpointsByRefundPointIdAffiliationsData, PostApiCrmServiceRefundpointsByRefundPointIdAffiliationsResponse, GetApiCrmServiceRefundpointsByRefundPointIdAffiliationsData, GetApiCrmServiceRefundpointsByRefundPointIdAffiliationsResponse, DeleteApiCrmServiceRefundpointsByRefundPointIdData, DeleteApiCrmServiceRefundpointsByRefundPointIdResponse, GetApiCrmServiceRefundpointsByRefundPointIdData, GetApiCrmServiceRefundpointsByRefundPointIdResponse, PutApiCrmServiceRefundpointsByRefundPointIdData, PutApiCrmServiceRefundpointsByRefundPointIdResponse, DeleteApiCrmServiceRefundpointsByRefundPointIdAffiliationsByAffiliationIdData, DeleteApiCrmServiceRefundpointsByRefundPointIdAffiliationsByAffiliationIdResponse, PutApiCrmServiceRefundpointsByRefundPointIdAffiliationsByAffiliationIdData, PutApiCrmServiceRefundpointsByRefundPointIdAffiliationsByAffiliationIdResponse, GetApiCrmServiceRefundpointsByRefundPointIdAddressesData, GetApiCrmServiceRefundpointsByRefundPointIdAddressesResponse, PutApiCrmServiceRefundpointsByRefundPointIdAddressesData, PutApiCrmServiceRefundpointsByRefundPointIdAddressesResponse, GetApiCrmServiceRefundpointsByRefundPointIdEmailsData, GetApiCrmServiceRefundpointsByRefundPointIdEmailsResponse, PutApiCrmServiceRefundpointsByRefundPointIdEmailsData, PutApiCrmServiceRefundpointsByRefundPointIdEmailsResponse, GetApiCrmServiceRefundpointsByRefundPointIdTelephonesData, GetApiCrmServiceRefundpointsByRefundPointIdTelephonesResponse, PutApiCrmServiceRefundpointsByRefundPointIdTelephonesData, PutApiCrmServiceRefundpointsByRefundPointIdTelephonesResponse, PostApiCrmServiceRegionsData, PostApiCrmServiceRegionsResponse, DeleteApiCrmServiceRegionsByRegionIdData, DeleteApiCrmServiceRegionsByRegionIdResponse, GetApiCrmServiceRegionsByRegionIdData, GetApiCrmServiceRegionsByRegionIdResponse, PutApiCrmServiceRegionsByRegionIdData, PutApiCrmServiceRegionsByRegionIdResponse, GetApiCrmServiceRegionsByCountryByCountryIdData, GetApiCrmServiceRegionsByCountryByCountryIdResponse, PostApiCrmServiceTaxfreesData, PostApiCrmServiceTaxfreesResponse, GetApiCrmServiceTaxfreesData, GetApiCrmServiceTaxfreesResponse, PostApiCrmServiceTaxfreesByTaxFreeIdAffiliationsData, PostApiCrmServiceTaxfreesByTaxFreeIdAffiliationsResponse, GetApiCrmServiceTaxfreesByTaxFreeIdAffiliationsData, GetApiCrmServiceTaxfreesByTaxFreeIdAffiliationsResponse, DeleteApiCrmServiceTaxfreesByTaxFreeIdData, DeleteApiCrmServiceTaxfreesByTaxFreeIdResponse, GetApiCrmServiceTaxfreesByTaxFreeIdData, GetApiCrmServiceTaxfreesByTaxFreeIdResponse, PutApiCrmServiceTaxfreesByTaxFreeIdData, PutApiCrmServiceTaxfreesByTaxFreeIdResponse, DeleteApiCrmServiceTaxfreesByTaxFreeIdAffiliationsByAffiliationIdData, DeleteApiCrmServiceTaxfreesByTaxFreeIdAffiliationsByAffiliationIdResponse, PutApiCrmServiceTaxfreesByTaxFreeIdAffiliationsByAffiliationIdData, PutApiCrmServiceTaxfreesByTaxFreeIdAffiliationsByAffiliationIdResponse, GetApiCrmServiceTaxfreesByTaxFreeIdAddressesData, GetApiCrmServiceTaxfreesByTaxFreeIdAddressesResponse, PutApiCrmServiceTaxfreesByTaxFreeIdAddressesData, PutApiCrmServiceTaxfreesByTaxFreeIdAddressesResponse, GetApiCrmServiceTaxfreesByTaxFreeIdEmailsData, GetApiCrmServiceTaxfreesByTaxFreeIdEmailsResponse, PutApiCrmServiceTaxfreesByTaxFreeIdEmailsData, PutApiCrmServiceTaxfreesByTaxFreeIdEmailsResponse, GetApiCrmServiceTaxfreesByTaxFreeIdTelephonesData, GetApiCrmServiceTaxfreesByTaxFreeIdTelephonesResponse, PutApiCrmServiceTaxfreesByTaxFreeIdTelephonesData, PutApiCrmServiceTaxfreesByTaxFreeIdTelephonesResponse, PostApiCrmServiceTaxofficesData, PostApiCrmServiceTaxofficesResponse, GetApiCrmServiceTaxofficesData, GetApiCrmServiceTaxofficesResponse, PostApiCrmServiceTaxofficesByTaxOfficeIdAffiliationsData, PostApiCrmServiceTaxofficesByTaxOfficeIdAffiliationsResponse, GetApiCrmServiceTaxofficesByTaxOfficeIdAffiliationsData, GetApiCrmServiceTaxofficesByTaxOfficeIdAffiliationsResponse, DeleteApiCrmServiceTaxofficesByTaxOfficeIdData, DeleteApiCrmServiceTaxofficesByTaxOfficeIdResponse, GetApiCrmServiceTaxofficesByTaxOfficeIdData, GetApiCrmServiceTaxofficesByTaxOfficeIdResponse, PutApiCrmServiceTaxofficesByTaxOfficeIdData, PutApiCrmServiceTaxofficesByTaxOfficeIdResponse, DeleteApiCrmServiceTaxofficesByTaxOfficeIdAffiliationsByAffiliationIdData, DeleteApiCrmServiceTaxofficesByTaxOfficeIdAffiliationsByAffiliationIdResponse, PutApiCrmServiceTaxofficesByTaxOfficeIdAffiliationsByAffiliationIdData, PutApiCrmServiceTaxofficesByTaxOfficeIdAffiliationsByAffiliationIdResponse, GetApiCrmServiceTaxofficesByTaxOfficeIdExistsData, GetApiCrmServiceTaxofficesByTaxOfficeIdExistsResponse, GetApiCrmServiceTaxofficesByTaxOfficeIdAddressesData, GetApiCrmServiceTaxofficesByTaxOfficeIdAddressesResponse, PutApiCrmServiceTaxofficesByTaxOfficeIdAddressesData, PutApiCrmServiceTaxofficesByTaxOfficeIdAddressesResponse, GetApiCrmServiceTaxofficesByTaxOfficeIdEmailsData, GetApiCrmServiceTaxofficesByTaxOfficeIdEmailsResponse, PutApiCrmServiceTaxofficesByTaxOfficeIdEmailsData, PutApiCrmServiceTaxofficesByTaxOfficeIdEmailsResponse, GetApiCrmServiceTaxofficesByTaxOfficeIdSubTaxOfficesData, GetApiCrmServiceTaxofficesByTaxOfficeIdSubTaxOfficesResponse, GetApiCrmServiceTaxofficesByTaxOfficeIdTelephonesData, GetApiCrmServiceTaxofficesByTaxOfficeIdTelephonesResponse, PutApiCrmServiceTaxofficesByTaxOfficeIdTelephonesData, PutApiCrmServiceTaxofficesByTaxOfficeIdTelephonesResponse, GetApiCrmServiceUserAffiliationsResponse, PostApiCrmServiceUserAffiliationsSetActiveAffiliationData, PostApiCrmServiceUserAffiliationsSetActiveAffiliationResponse } from './types.gen';

export class AdminAreaLevel1Service {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel1, CRMService.AdminAreaLevel1.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceAdminarealevel1(data: PostApiCrmServiceAdminarealevel1Data = {}): CancelablePromise<PostApiCrmServiceAdminarealevel1Response> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/adminarealevel1',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel1, CRMService.AdminAreaLevel1.Delete
     * @param data The data for the request.
     * @param data.adminAreaLevel1Id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceAdminarealevel1ByAdminAreaLevel1Id(data: DeleteApiCrmServiceAdminarealevel1ByAdminAreaLevel1IdData): CancelablePromise<DeleteApiCrmServiceAdminarealevel1ByAdminAreaLevel1IdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/adminarealevel1/{adminAreaLevel1Id}',
            path: {
                adminAreaLevel1Id: data.adminAreaLevel1Id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel1, CRMService.AdminAreaLevel1.View
     * @param data The data for the request.
     * @param data.adminAreaLevel1Id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceAdminarealevel1ByAdminAreaLevel1Id(data: GetApiCrmServiceAdminarealevel1ByAdminAreaLevel1IdData): CancelablePromise<GetApiCrmServiceAdminarealevel1ByAdminAreaLevel1IdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/adminarealevel1/{adminAreaLevel1Id}',
            path: {
                adminAreaLevel1Id: data.adminAreaLevel1Id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel1, CRMService.AdminAreaLevel1.Edit
     * @param data The data for the request.
     * @param data.adminAreaLevel1Id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceAdminarealevel1ByAdminAreaLevel1Id(data: PutApiCrmServiceAdminarealevel1ByAdminAreaLevel1IdData): CancelablePromise<PutApiCrmServiceAdminarealevel1ByAdminAreaLevel1IdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/adminarealevel1/{adminAreaLevel1Id}',
            path: {
                adminAreaLevel1Id: data.adminAreaLevel1Id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel1, CRMService.AdminAreaLevel1.ViewList
     * @param data The data for the request.
     * @param data.countryId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceAdminarealevel1ByCountryByCountryId(data: GetApiCrmServiceAdminarealevel1ByCountryByCountryIdData): CancelablePromise<GetApiCrmServiceAdminarealevel1ByCountryByCountryIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/adminarealevel1/by-country/{countryId}',
            path: {
                countryId: data.countryId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class AdminAreaLevel2Service {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel2, CRMService.AdminAreaLevel2.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceAdminarealevel2(data: PostApiCrmServiceAdminarealevel2Data = {}): CancelablePromise<PostApiCrmServiceAdminarealevel2Response> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/adminarealevel2',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel2, CRMService.AdminAreaLevel2.Delete
     * @param data The data for the request.
     * @param data.adminAreaLevel2Id
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceAdminarealevel2ByAdminAreaLevel2Id(data: DeleteApiCrmServiceAdminarealevel2ByAdminAreaLevel2IdData): CancelablePromise<DeleteApiCrmServiceAdminarealevel2ByAdminAreaLevel2IdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/adminarealevel2/{adminAreaLevel2Id}',
            path: {
                adminAreaLevel2Id: data.adminAreaLevel2Id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel2, CRMService.AdminAreaLevel2.View
     * @param data The data for the request.
     * @param data.adminAreaLevel2Id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceAdminarealevel2ByAdminAreaLevel2Id(data: GetApiCrmServiceAdminarealevel2ByAdminAreaLevel2IdData): CancelablePromise<GetApiCrmServiceAdminarealevel2ByAdminAreaLevel2IdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/adminarealevel2/{adminAreaLevel2Id}',
            path: {
                adminAreaLevel2Id: data.adminAreaLevel2Id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel2, CRMService.AdminAreaLevel2.Edit
     * @param data The data for the request.
     * @param data.adminAreaLevel2Id
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceAdminarealevel2ByAdminAreaLevel2Id(data: PutApiCrmServiceAdminarealevel2ByAdminAreaLevel2IdData): CancelablePromise<PutApiCrmServiceAdminarealevel2ByAdminAreaLevel2IdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/adminarealevel2/{adminAreaLevel2Id}',
            path: {
                adminAreaLevel2Id: data.adminAreaLevel2Id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.AdminAreaLevel2, CRMService.AdminAreaLevel2.ViewList
     * @param data The data for the request.
     * @param data.adminAreaLevel1Id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceAdminarealevel2ByAdminarealevel1ByAdminAreaLevel1Id(data: GetApiCrmServiceAdminarealevel2ByAdminarealevel1ByAdminAreaLevel1IdData): CancelablePromise<GetApiCrmServiceAdminarealevel2ByAdminarealevel1ByAdminAreaLevel1IdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/adminarealevel2/by-adminarealevel1/{adminAreaLevel1Id}',
            path: {
                adminAreaLevel1Id: data.adminAreaLevel1Id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class CountryService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.Countries, CRMService.Countries.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceCountries(data: PostApiCrmServiceCountriesData = {}): CancelablePromise<PostApiCrmServiceCountriesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/countries',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Countries
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceCountries(): CancelablePromise<GetApiCrmServiceCountriesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/countries',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Countries, CRMService.Countries.Delete
     * @param data The data for the request.
     * @param data.countryId
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceCountriesByCountryId(data: DeleteApiCrmServiceCountriesByCountryIdData): CancelablePromise<DeleteApiCrmServiceCountriesByCountryIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/countries/{countryId}',
            path: {
                countryId: data.countryId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Countries, CRMService.Countries.View
     * @param data The data for the request.
     * @param data.countryId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceCountriesByCountryId(data: GetApiCrmServiceCountriesByCountryIdData): CancelablePromise<GetApiCrmServiceCountriesByCountryIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/countries/{countryId}',
            path: {
                countryId: data.countryId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Countries, CRMService.Countries.Edit
     * @param data The data for the request.
     * @param data.countryId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceCountriesByCountryId(data: PutApiCrmServiceCountriesByCountryIdData): CancelablePromise<PutApiCrmServiceCountriesByCountryIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/countries/{countryId}',
            path: {
                countryId: data.countryId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class CustomService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceCustoms(data: PostApiCrmServiceCustomsData = {}): CancelablePromise<PostApiCrmServiceCustomsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/customs',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.ViewList
     * @param data The data for the request.
     * @param data.customIds
     * @param data.name
     * @param data.vatNumber
     * @param data.gateNumber
     * @param data.parentId
     * @param data.typeCodes
     * @param data.statuses
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceCustoms(data: GetApiCrmServiceCustomsData = {}): CancelablePromise<GetApiCrmServiceCustomsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/customs',
            query: {
                CustomIds: data.customIds,
                Name: data.name,
                VatNumber: data.vatNumber,
                GateNumber: data.gateNumber,
                ParentId: data.parentId,
                TypeCodes: data.typeCodes,
                Statuses: data.statuses,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.CreateAffiliation
     * @param data The data for the request.
     * @param data.customId
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceCustomsByCustomIdAffiliations(data: PostApiCrmServiceCustomsByCustomIdAffiliationsData): CancelablePromise<PostApiCrmServiceCustomsByCustomIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/customs/{customId}/affiliations',
            path: {
                customId: data.customId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.ViewAffiliationList
     * @param data The data for the request.
     * @param data.customId
     * @param data.name
     * @param data.roleName
     * @param data.email
     * @param data.telephone
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceCustomsByCustomIdAffiliations(data: GetApiCrmServiceCustomsByCustomIdAffiliationsData): CancelablePromise<GetApiCrmServiceCustomsByCustomIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/customs/{customId}/affiliations',
            path: {
                customId: data.customId
            },
            query: {
                Name: data.name,
                RoleName: data.roleName,
                Email: data.email,
                Telephone: data.telephone,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.Delete
     * @param data The data for the request.
     * @param data.customId
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceCustomsByCustomId(data: DeleteApiCrmServiceCustomsByCustomIdData): CancelablePromise<DeleteApiCrmServiceCustomsByCustomIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/customs/{customId}',
            path: {
                customId: data.customId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.View
     * @param data The data for the request.
     * @param data.customId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceCustomsByCustomId(data: GetApiCrmServiceCustomsByCustomIdData): CancelablePromise<GetApiCrmServiceCustomsByCustomIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/customs/{customId}',
            path: {
                customId: data.customId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.Edit
     * @param data The data for the request.
     * @param data.customId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceCustomsByCustomId(data: PutApiCrmServiceCustomsByCustomIdData): CancelablePromise<PutApiCrmServiceCustomsByCustomIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/customs/{customId}',
            path: {
                customId: data.customId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.DeleteAffiliation
     * @param data The data for the request.
     * @param data.customId
     * @param data.affiliationId
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationId(data: DeleteApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationIdData): CancelablePromise<DeleteApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/customs/{customId}/affiliations/{affiliationId}',
            path: {
                customId: data.customId,
                affiliationId: data.affiliationId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.Edit
     * @param data The data for the request.
     * @param data.customId
     * @param data.affiliationId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationId(data: PutApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationIdData): CancelablePromise<PutApiCrmServiceCustomsByCustomIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/customs/{customId}/affiliations/{affiliationId}',
            path: {
                customId: data.customId,
                affiliationId: data.affiliationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.ViewAddressList
     * @param data The data for the request.
     * @param data.customId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceCustomsByCustomIdAddresses(data: GetApiCrmServiceCustomsByCustomIdAddressesData): CancelablePromise<GetApiCrmServiceCustomsByCustomIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/customs/{customId}/addresses',
            path: {
                customId: data.customId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.EditAddress
     * @param data The data for the request.
     * @param data.customId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceCustomsByCustomIdAddresses(data: PutApiCrmServiceCustomsByCustomIdAddressesData): CancelablePromise<PutApiCrmServiceCustomsByCustomIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/customs/{customId}/addresses',
            path: {
                customId: data.customId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.ViewEmailList
     * @param data The data for the request.
     * @param data.customId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceCustomsByCustomIdEmails(data: GetApiCrmServiceCustomsByCustomIdEmailsData): CancelablePromise<GetApiCrmServiceCustomsByCustomIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/customs/{customId}/emails',
            path: {
                customId: data.customId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.EditEmail
     * @param data The data for the request.
     * @param data.customId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceCustomsByCustomIdEmails(data: PutApiCrmServiceCustomsByCustomIdEmailsData): CancelablePromise<PutApiCrmServiceCustomsByCustomIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/customs/{customId}/emails',
            path: {
                customId: data.customId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.ViewSubCustomsList
     * @param data The data for the request.
     * @param data.customId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceCustomsByCustomIdSubCustoms(data: GetApiCrmServiceCustomsByCustomIdSubCustomsData): CancelablePromise<GetApiCrmServiceCustomsByCustomIdSubCustomsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/customs/{customId}/sub-customs',
            path: {
                customId: data.customId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.ViewTelephoneList
     * @param data The data for the request.
     * @param data.customId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceCustomsByCustomIdTelephones(data: GetApiCrmServiceCustomsByCustomIdTelephonesData): CancelablePromise<GetApiCrmServiceCustomsByCustomIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/customs/{customId}/telephones',
            path: {
                customId: data.customId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Customs, CRMService.Customs.EditTelephone
     * @param data The data for the request.
     * @param data.customId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceCustomsByCustomIdTelephones(data: PutApiCrmServiceCustomsByCustomIdTelephonesData): CancelablePromise<PutApiCrmServiceCustomsByCustomIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/customs/{customId}/telephones',
            path: {
                customId: data.customId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class IndividualService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceIndividuals(data: PostApiCrmServiceIndividualsData = {}): CancelablePromise<PostApiCrmServiceIndividualsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/individuals',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.ViewList
     * @param data The data for the request.
     * @param data.name
     * @param data.email
     * @param data.telephone
     * @param data.ıdentificationNumber
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceIndividuals(data: GetApiCrmServiceIndividualsData = {}): CancelablePromise<GetApiCrmServiceIndividualsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/individuals',
            query: {
                Name: data.name,
                Email: data.email,
                Telephone: data.telephone,
                IdentificationNumber: data.ıdentificationNumber,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.View
     * @param data The data for the request.
     * @param data.individualId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceIndividualsByIndividualId(data: GetApiCrmServiceIndividualsByIndividualIdData): CancelablePromise<GetApiCrmServiceIndividualsByIndividualIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/individuals/{individualId}',
            path: {
                individualId: data.individualId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.Edit
     * @param data The data for the request.
     * @param data.individualId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceIndividualsByIndividualId(data: PutApiCrmServiceIndividualsByIndividualIdData): CancelablePromise<PutApiCrmServiceIndividualsByIndividualIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/individuals/{individualId}',
            path: {
                individualId: data.individualId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.Delete
     * @param data The data for the request.
     * @param data.individualId
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceIndividualsByIndividualId(data: DeleteApiCrmServiceIndividualsByIndividualIdData): CancelablePromise<DeleteApiCrmServiceIndividualsByIndividualIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/individuals/{individualId}',
            path: {
                individualId: data.individualId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.EditTelephone
     * @param data The data for the request.
     * @param data.individualId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceIndividualsByIndividualIdTelephones(data: PutApiCrmServiceIndividualsByIndividualIdTelephonesData): CancelablePromise<PutApiCrmServiceIndividualsByIndividualIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/individuals/{individualId}/telephones',
            path: {
                individualId: data.individualId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.ViewTelephoneList
     * @param data The data for the request.
     * @param data.individualId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceIndividualsByIndividualIdTelephones(data: GetApiCrmServiceIndividualsByIndividualIdTelephonesData): CancelablePromise<GetApiCrmServiceIndividualsByIndividualIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/individuals/{individualId}/telephones',
            path: {
                individualId: data.individualId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.EditEmail
     * @param data The data for the request.
     * @param data.individualId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceIndividualsByIndividualIdEmails(data: PutApiCrmServiceIndividualsByIndividualIdEmailsData): CancelablePromise<PutApiCrmServiceIndividualsByIndividualIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/individuals/{individualId}/emails',
            path: {
                individualId: data.individualId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.ViewEmailList
     * @param data The data for the request.
     * @param data.individualId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceIndividualsByIndividualIdEmails(data: GetApiCrmServiceIndividualsByIndividualIdEmailsData): CancelablePromise<GetApiCrmServiceIndividualsByIndividualIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/individuals/{individualId}/emails',
            path: {
                individualId: data.individualId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.EditAddress
     * @param data The data for the request.
     * @param data.individualId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceIndividualsByIndividualIdAddresses(data: PutApiCrmServiceIndividualsByIndividualIdAddressesData): CancelablePromise<PutApiCrmServiceIndividualsByIndividualIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/individuals/{individualId}/addresses',
            path: {
                individualId: data.individualId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.ViewAddressList
     * @param data The data for the request.
     * @param data.individualId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceIndividualsByIndividualIdAddresses(data: GetApiCrmServiceIndividualsByIndividualIdAddressesData): CancelablePromise<GetApiCrmServiceIndividualsByIndividualIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/individuals/{individualId}/addresses',
            path: {
                individualId: data.individualId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Individuals, CRMService.Individuals.ViewIdAndNameByEmail
     * @param data The data for the request.
     * @param data.email
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceIndividualsByEmail(data: GetApiCrmServiceIndividualsByEmailData = {}): CancelablePromise<GetApiCrmServiceIndividualsByEmailResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/individuals/by-email',
            query: {
                email: data.email
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class MerchantService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.View
     * @param data The data for the request.
     * @param data.merchantId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceMerchantsByMerchantId(data: GetApiCrmServiceMerchantsByMerchantIdData): CancelablePromise<GetApiCrmServiceMerchantsByMerchantIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/merchants/{merchantId}',
            path: {
                merchantId: data.merchantId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.Edit
     * @param data The data for the request.
     * @param data.merchantId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceMerchantsByMerchantId(data: PutApiCrmServiceMerchantsByMerchantIdData): CancelablePromise<PutApiCrmServiceMerchantsByMerchantIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/merchants/{merchantId}',
            path: {
                merchantId: data.merchantId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.Delete
     * @param data The data for the request.
     * @param data.merchantId
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceMerchantsByMerchantId(data: DeleteApiCrmServiceMerchantsByMerchantIdData): CancelablePromise<DeleteApiCrmServiceMerchantsByMerchantIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/merchants/{merchantId}',
            path: {
                merchantId: data.merchantId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.ViewStoreList
     * @param data The data for the request.
     * @param data.merchantId
     * @param data.merchantIds
     * @param data.chainCodeId
     * @param data.name
     * @param data.vatNumber
     * @param data.typeCodes
     * @param data.externalStoreIdentifier
     * @param data.parentId
     * @param data.productGroupIds
     * @param data.statusCodes
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceMerchantsByMerchantIdSubMerchants(data: GetApiCrmServiceMerchantsByMerchantIdSubMerchantsData): CancelablePromise<GetApiCrmServiceMerchantsByMerchantIdSubMerchantsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/merchants/{merchantId}/sub-merchants',
            path: {
                merchantId: data.merchantId
            },
            query: {
                MerchantIds: data.merchantIds,
                ChainCodeId: data.chainCodeId,
                Name: data.name,
                VatNumber: data.vatNumber,
                TypeCodes: data.typeCodes,
                ExternalStoreIdentifier: data.externalStoreIdentifier,
                ParentId: data.parentId,
                ProductGroupIds: data.productGroupIds,
                StatusCodes: data.statusCodes,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.ViewAffiliationList
     * @param data The data for the request.
     * @param data.merchantId
     * @param data.name
     * @param data.roleName
     * @param data.email
     * @param data.telephone
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceMerchantsByMerchantIdAffiliations(data: GetApiCrmServiceMerchantsByMerchantIdAffiliationsData): CancelablePromise<GetApiCrmServiceMerchantsByMerchantIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/merchants/{merchantId}/affiliations',
            path: {
                merchantId: data.merchantId
            },
            query: {
                Name: data.name,
                RoleName: data.roleName,
                Email: data.email,
                Telephone: data.telephone,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.CreateAffiliation
     * @param data The data for the request.
     * @param data.merchantId
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceMerchantsByMerchantIdAffiliations(data: PostApiCrmServiceMerchantsByMerchantIdAffiliationsData): CancelablePromise<PostApiCrmServiceMerchantsByMerchantIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/merchants/{merchantId}/affiliations',
            path: {
                merchantId: data.merchantId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants
     * @param data The data for the request.
     * @param data.merchantId
     * @param data.affiliationId
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationId(data: DeleteApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationIdData): CancelablePromise<DeleteApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/merchants/{merchantId}/affiliations/{affiliationId}',
            path: {
                merchantId: data.merchantId,
                affiliationId: data.affiliationId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.EditAffiliation
     * @param data The data for the request.
     * @param data.merchantId
     * @param data.affiliationId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationId(data: PutApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationIdData): CancelablePromise<PutApiCrmServiceMerchantsByMerchantIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/merchants/{merchantId}/affiliations/{affiliationId}',
            path: {
                merchantId: data.merchantId,
                affiliationId: data.affiliationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.CreateBulkProductGroupMerchant
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiCrmServiceMerchantsBulkProductGroupMerchants(data: PostApiCrmServiceMerchantsBulkProductGroupMerchantsData = {}): CancelablePromise<PostApiCrmServiceMerchantsBulkProductGroupMerchantsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/merchants/bulk-product-group-merchants',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants
     * @param data The data for the request.
     * @param data.merchantId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceMerchantsByMerchantIdProductGroup(data: GetApiCrmServiceMerchantsByMerchantIdProductGroupData): CancelablePromise<GetApiCrmServiceMerchantsByMerchantIdProductGroupResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/merchants/{merchantId}/product-group',
            path: {
                merchantId: data.merchantId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants
     * @param data The data for the request.
     * @param data.merchantId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiCrmServiceMerchantsByMerchantIdProductGroups(data: PostApiCrmServiceMerchantsByMerchantIdProductGroupsData): CancelablePromise<PostApiCrmServiceMerchantsByMerchantIdProductGroupsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/merchants/{merchantId}/product-groups',
            path: {
                merchantId: data.merchantId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants
     * @param data The data for the request.
     * @param data.merchantId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceMerchantsByMerchantIdProductGroups(data: DeleteApiCrmServiceMerchantsByMerchantIdProductGroupsData): CancelablePromise<DeleteApiCrmServiceMerchantsByMerchantIdProductGroupsResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/merchants/{merchantId}/product-groups',
            path: {
                merchantId: data.merchantId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants
     * @param data The data for the request.
     * @param data.merchantId
     * @param data.productGroupId
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiCrmServiceMerchantsByMerchantIdProductGroupByProductGroupIdDefault(data: PostApiCrmServiceMerchantsByMerchantIdProductGroupByProductGroupIdDefaultData): CancelablePromise<PostApiCrmServiceMerchantsByMerchantIdProductGroupByProductGroupIdDefaultResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/merchants/{merchantId}/product-group/{productGroupId}/default',
            path: {
                merchantId: data.merchantId,
                productGroupId: data.productGroupId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceMerchants(data: PostApiCrmServiceMerchantsData = {}): CancelablePromise<PostApiCrmServiceMerchantsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/merchants',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.ViewList
     * @param data The data for the request.
     * @param data.merchantIds
     * @param data.chainCodeId
     * @param data.name
     * @param data.vatNumber
     * @param data.typeCodes
     * @param data.externalStoreIdentifier
     * @param data.parentId
     * @param data.productGroupIds
     * @param data.statusCodes
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceMerchants(data: GetApiCrmServiceMerchantsData = {}): CancelablePromise<GetApiCrmServiceMerchantsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/merchants',
            query: {
                MerchantIds: data.merchantIds,
                ChainCodeId: data.chainCodeId,
                Name: data.name,
                VatNumber: data.vatNumber,
                TypeCodes: data.typeCodes,
                ExternalStoreIdentifier: data.externalStoreIdentifier,
                ParentId: data.parentId,
                ProductGroupIds: data.productGroupIds,
                StatusCodes: data.statusCodes,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.EditTelephone
     * @param data The data for the request.
     * @param data.merchantId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceMerchantsByMerchantIdTelephones(data: PutApiCrmServiceMerchantsByMerchantIdTelephonesData): CancelablePromise<PutApiCrmServiceMerchantsByMerchantIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/merchants/{merchantId}/telephones',
            path: {
                merchantId: data.merchantId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.ViewTelephoneList
     * @param data The data for the request.
     * @param data.merchantId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceMerchantsByMerchantIdTelephones(data: GetApiCrmServiceMerchantsByMerchantIdTelephonesData): CancelablePromise<GetApiCrmServiceMerchantsByMerchantIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/merchants/{merchantId}/telephones',
            path: {
                merchantId: data.merchantId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.EditEmail
     * @param data The data for the request.
     * @param data.merchantId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceMerchantsByMerchantIdEmails(data: PutApiCrmServiceMerchantsByMerchantIdEmailsData): CancelablePromise<PutApiCrmServiceMerchantsByMerchantIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/merchants/{merchantId}/emails',
            path: {
                merchantId: data.merchantId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.ViewEmailList
     * @param data The data for the request.
     * @param data.merchantId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceMerchantsByMerchantIdEmails(data: GetApiCrmServiceMerchantsByMerchantIdEmailsData): CancelablePromise<GetApiCrmServiceMerchantsByMerchantIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/merchants/{merchantId}/emails',
            path: {
                merchantId: data.merchantId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.EditAddress
     * @param data The data for the request.
     * @param data.merchantId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceMerchantsByMerchantIdAddresses(data: PutApiCrmServiceMerchantsByMerchantIdAddressesData): CancelablePromise<PutApiCrmServiceMerchantsByMerchantIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/merchants/{merchantId}/addresses',
            path: {
                merchantId: data.merchantId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Merchants, CRMService.Merchants.ViewAddressList
     * @param data The data for the request.
     * @param data.merchantId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceMerchantsByMerchantIdAddresses(data: GetApiCrmServiceMerchantsByMerchantIdAddressesData): CancelablePromise<GetApiCrmServiceMerchantsByMerchantIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/merchants/{merchantId}/addresses',
            path: {
                merchantId: data.merchantId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class NeighborhoodService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.Neighborhoods, CRMService.Neighborhoods.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceNeighborhoods(data: PostApiCrmServiceNeighborhoodsData = {}): CancelablePromise<PostApiCrmServiceNeighborhoodsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/neighborhoods',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Neighborhoods, CRMService.Neighborhoods.Delete
     * @param data The data for the request.
     * @param data.neighborhoodId
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceNeighborhoodsByNeighborhoodId(data: DeleteApiCrmServiceNeighborhoodsByNeighborhoodIdData): CancelablePromise<DeleteApiCrmServiceNeighborhoodsByNeighborhoodIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/neighborhoods/{neighborhoodId}',
            path: {
                neighborhoodId: data.neighborhoodId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Neighborhoods, CRMService.Neighborhoods.Edit
     * @param data The data for the request.
     * @param data.neighborhoodId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceNeighborhoodsByNeighborhoodId(data: PutApiCrmServiceNeighborhoodsByNeighborhoodIdData): CancelablePromise<PutApiCrmServiceNeighborhoodsByNeighborhoodIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/neighborhoods/{neighborhoodId}',
            path: {
                neighborhoodId: data.neighborhoodId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Neighborhoods, CRMService.Neighborhoods.ViewList
     * @param data The data for the request.
     * @param data.adminAreaLevel2Id
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceNeighborhoodsByAdminarealevel2ByAdminAreaLevel2Id(data: GetApiCrmServiceNeighborhoodsByAdminarealevel2ByAdminAreaLevel2IdData): CancelablePromise<GetApiCrmServiceNeighborhoodsByAdminarealevel2ByAdminAreaLevel2IdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/neighborhoods/by-adminarealevel2/{adminAreaLevel2Id}',
            path: {
                adminAreaLevel2Id: data.adminAreaLevel2Id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class RefundPointService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceRefundpoints(data: PostApiCrmServiceRefundpointsData = {}): CancelablePromise<PostApiCrmServiceRefundpointsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/refundpoints',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.ViewList
     * @param data The data for the request.
     * @param data.refundPointIds
     * @param data.name
     * @param data.vatNumber
     * @param data.externalStoreIdentifier
     * @param data.parentId
     * @param data.typeCodes
     * @param data.statuses
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceRefundpoints(data: GetApiCrmServiceRefundpointsData = {}): CancelablePromise<GetApiCrmServiceRefundpointsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/refundpoints',
            query: {
                RefundPointIds: data.refundPointIds,
                Name: data.name,
                VatNumber: data.vatNumber,
                ExternalStoreIdentifier: data.externalStoreIdentifier,
                ParentId: data.parentId,
                TypeCodes: data.typeCodes,
                Statuses: data.statuses,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.CreateAffiliation
     * @param data The data for the request.
     * @param data.refundPointId
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceRefundpointsByRefundPointIdAffiliations(data: PostApiCrmServiceRefundpointsByRefundPointIdAffiliationsData): CancelablePromise<PostApiCrmServiceRefundpointsByRefundPointIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/refundpoints/{refundPointId}/affiliations',
            path: {
                refundPointId: data.refundPointId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.ViewAffiliationList
     * @param data The data for the request.
     * @param data.refundPointId
     * @param data.name
     * @param data.roleName
     * @param data.email
     * @param data.telephone
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceRefundpointsByRefundPointIdAffiliations(data: GetApiCrmServiceRefundpointsByRefundPointIdAffiliationsData): CancelablePromise<GetApiCrmServiceRefundpointsByRefundPointIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/refundpoints/{refundPointId}/affiliations',
            path: {
                refundPointId: data.refundPointId
            },
            query: {
                Name: data.name,
                RoleName: data.roleName,
                Email: data.email,
                Telephone: data.telephone,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.Delete
     * @param data The data for the request.
     * @param data.refundPointId
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceRefundpointsByRefundPointId(data: DeleteApiCrmServiceRefundpointsByRefundPointIdData): CancelablePromise<DeleteApiCrmServiceRefundpointsByRefundPointIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/refundpoints/{refundPointId}',
            path: {
                refundPointId: data.refundPointId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.View
     * @param data The data for the request.
     * @param data.refundPointId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceRefundpointsByRefundPointId(data: GetApiCrmServiceRefundpointsByRefundPointIdData): CancelablePromise<GetApiCrmServiceRefundpointsByRefundPointIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/refundpoints/{refundPointId}',
            path: {
                refundPointId: data.refundPointId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.Edit
     * @param data The data for the request.
     * @param data.refundPointId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceRefundpointsByRefundPointId(data: PutApiCrmServiceRefundpointsByRefundPointIdData): CancelablePromise<PutApiCrmServiceRefundpointsByRefundPointIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/refundpoints/{refundPointId}',
            path: {
                refundPointId: data.refundPointId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.DeleteAffiliation
     * @param data The data for the request.
     * @param data.refundPointId
     * @param data.affiliationId
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceRefundpointsByRefundPointIdAffiliationsByAffiliationId(data: DeleteApiCrmServiceRefundpointsByRefundPointIdAffiliationsByAffiliationIdData): CancelablePromise<DeleteApiCrmServiceRefundpointsByRefundPointIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/refundpoints/{refundPointId}/affiliations/{affiliationId}',
            path: {
                refundPointId: data.refundPointId,
                affiliationId: data.affiliationId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.EditAffiliation
     * @param data The data for the request.
     * @param data.refundPointId
     * @param data.affiliationId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceRefundpointsByRefundPointIdAffiliationsByAffiliationId(data: PutApiCrmServiceRefundpointsByRefundPointIdAffiliationsByAffiliationIdData): CancelablePromise<PutApiCrmServiceRefundpointsByRefundPointIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/refundpoints/{refundPointId}/affiliations/{affiliationId}',
            path: {
                refundPointId: data.refundPointId,
                affiliationId: data.affiliationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.ViewAddressList
     * @param data The data for the request.
     * @param data.refundPointId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceRefundpointsByRefundPointIdAddresses(data: GetApiCrmServiceRefundpointsByRefundPointIdAddressesData): CancelablePromise<GetApiCrmServiceRefundpointsByRefundPointIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/refundpoints/{refundPointId}/addresses',
            path: {
                refundPointId: data.refundPointId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.EditAddress
     * @param data The data for the request.
     * @param data.refundPointId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceRefundpointsByRefundPointIdAddresses(data: PutApiCrmServiceRefundpointsByRefundPointIdAddressesData): CancelablePromise<PutApiCrmServiceRefundpointsByRefundPointIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/refundpoints/{refundPointId}/addresses',
            path: {
                refundPointId: data.refundPointId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.ViewEmailList
     * @param data The data for the request.
     * @param data.refundPointId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceRefundpointsByRefundPointIdEmails(data: GetApiCrmServiceRefundpointsByRefundPointIdEmailsData): CancelablePromise<GetApiCrmServiceRefundpointsByRefundPointIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/refundpoints/{refundPointId}/emails',
            path: {
                refundPointId: data.refundPointId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.EditEmail
     * @param data The data for the request.
     * @param data.refundPointId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceRefundpointsByRefundPointIdEmails(data: PutApiCrmServiceRefundpointsByRefundPointIdEmailsData): CancelablePromise<PutApiCrmServiceRefundpointsByRefundPointIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/refundpoints/{refundPointId}/emails',
            path: {
                refundPointId: data.refundPointId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.ViewTelephoneList
     * @param data The data for the request.
     * @param data.refundPointId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceRefundpointsByRefundPointIdTelephones(data: GetApiCrmServiceRefundpointsByRefundPointIdTelephonesData): CancelablePromise<GetApiCrmServiceRefundpointsByRefundPointIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/refundpoints/{refundPointId}/telephones',
            path: {
                refundPointId: data.refundPointId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.RefundPoints, CRMService.RefundPoints.EditTelephone
     * @param data The data for the request.
     * @param data.refundPointId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceRefundpointsByRefundPointIdTelephones(data: PutApiCrmServiceRefundpointsByRefundPointIdTelephonesData): CancelablePromise<PutApiCrmServiceRefundpointsByRefundPointIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/refundpoints/{refundPointId}/telephones',
            path: {
                refundPointId: data.refundPointId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class RegionService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.Regions, CRMService.Regions.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceRegions(data: PostApiCrmServiceRegionsData = {}): CancelablePromise<PostApiCrmServiceRegionsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/regions',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Regions, CRMService.Regions.Delete
     * @param data The data for the request.
     * @param data.regionId
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceRegionsByRegionId(data: DeleteApiCrmServiceRegionsByRegionIdData): CancelablePromise<DeleteApiCrmServiceRegionsByRegionIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/regions/{regionId}',
            path: {
                regionId: data.regionId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Regions, CRMService.Regions.View
     * @param data The data for the request.
     * @param data.regionId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceRegionsByRegionId(data: GetApiCrmServiceRegionsByRegionIdData): CancelablePromise<GetApiCrmServiceRegionsByRegionIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/regions/{regionId}',
            path: {
                regionId: data.regionId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Regions, CRMService.Regions.Edit
     * @param data The data for the request.
     * @param data.regionId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceRegionsByRegionId(data: PutApiCrmServiceRegionsByRegionIdData): CancelablePromise<PutApiCrmServiceRegionsByRegionIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/regions/{regionId}',
            path: {
                regionId: data.regionId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.Regions, CRMService.Regions.ViewList
     * @param data The data for the request.
     * @param data.countryId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceRegionsByCountryByCountryId(data: GetApiCrmServiceRegionsByCountryByCountryIdData): CancelablePromise<GetApiCrmServiceRegionsByCountryByCountryIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/regions/by-country/{countryId}',
            path: {
                countryId: data.countryId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class TaxFreeService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceTaxfrees(data: PostApiCrmServiceTaxfreesData = {}): CancelablePromise<PostApiCrmServiceTaxfreesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/taxfrees',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.ViewList
     * @param data The data for the request.
     * @param data.taxFreeIds
     * @param data.name
     * @param data.vatNumber
     * @param data.externalStoreIdentifier
     * @param data.parentId
     * @param data.typeCodes
     * @param data.statuses
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxfrees(data: GetApiCrmServiceTaxfreesData = {}): CancelablePromise<GetApiCrmServiceTaxfreesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/taxfrees',
            query: {
                TaxFreeIds: data.taxFreeIds,
                Name: data.name,
                VatNumber: data.vatNumber,
                ExternalStoreIdentifier: data.externalStoreIdentifier,
                ParentId: data.parentId,
                TypeCodes: data.typeCodes,
                Statuses: data.statuses,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.CreateAffiliation
     * @param data The data for the request.
     * @param data.taxFreeId
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceTaxfreesByTaxFreeIdAffiliations(data: PostApiCrmServiceTaxfreesByTaxFreeIdAffiliationsData): CancelablePromise<PostApiCrmServiceTaxfreesByTaxFreeIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/taxfrees/{taxFreeId}/affiliations',
            path: {
                taxFreeId: data.taxFreeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.ViewAffiliationList
     * @param data The data for the request.
     * @param data.taxFreeId
     * @param data.name
     * @param data.roleName
     * @param data.email
     * @param data.telephone
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxfreesByTaxFreeIdAffiliations(data: GetApiCrmServiceTaxfreesByTaxFreeIdAffiliationsData): CancelablePromise<GetApiCrmServiceTaxfreesByTaxFreeIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/taxfrees/{taxFreeId}/affiliations',
            path: {
                taxFreeId: data.taxFreeId
            },
            query: {
                Name: data.name,
                RoleName: data.roleName,
                Email: data.email,
                Telephone: data.telephone,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.Delete
     * @param data The data for the request.
     * @param data.taxFreeId
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceTaxfreesByTaxFreeId(data: DeleteApiCrmServiceTaxfreesByTaxFreeIdData): CancelablePromise<DeleteApiCrmServiceTaxfreesByTaxFreeIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/taxfrees/{taxFreeId}',
            path: {
                taxFreeId: data.taxFreeId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.View
     * @param data The data for the request.
     * @param data.taxFreeId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxfreesByTaxFreeId(data: GetApiCrmServiceTaxfreesByTaxFreeIdData): CancelablePromise<GetApiCrmServiceTaxfreesByTaxFreeIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/taxfrees/{taxFreeId}',
            path: {
                taxFreeId: data.taxFreeId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.Edit
     * @param data The data for the request.
     * @param data.taxFreeId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxfreesByTaxFreeId(data: PutApiCrmServiceTaxfreesByTaxFreeIdData): CancelablePromise<PutApiCrmServiceTaxfreesByTaxFreeIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/taxfrees/{taxFreeId}',
            path: {
                taxFreeId: data.taxFreeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees
     * @param data The data for the request.
     * @param data.taxFreeId
     * @param data.affiliationId
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceTaxfreesByTaxFreeIdAffiliationsByAffiliationId(data: DeleteApiCrmServiceTaxfreesByTaxFreeIdAffiliationsByAffiliationIdData): CancelablePromise<DeleteApiCrmServiceTaxfreesByTaxFreeIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/taxfrees/{taxFreeId}/affiliations/{affiliationId}',
            path: {
                taxFreeId: data.taxFreeId,
                affiliationId: data.affiliationId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.EditAffiliation
     * @param data The data for the request.
     * @param data.taxFreeId
     * @param data.affiliationId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxfreesByTaxFreeIdAffiliationsByAffiliationId(data: PutApiCrmServiceTaxfreesByTaxFreeIdAffiliationsByAffiliationIdData): CancelablePromise<PutApiCrmServiceTaxfreesByTaxFreeIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/taxfrees/{taxFreeId}/affiliations/{affiliationId}',
            path: {
                taxFreeId: data.taxFreeId,
                affiliationId: data.affiliationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.ViewAddressList
     * @param data The data for the request.
     * @param data.taxFreeId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxfreesByTaxFreeIdAddresses(data: GetApiCrmServiceTaxfreesByTaxFreeIdAddressesData): CancelablePromise<GetApiCrmServiceTaxfreesByTaxFreeIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/taxfrees/{taxFreeId}/addresses',
            path: {
                taxFreeId: data.taxFreeId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.EditAddress
     * @param data The data for the request.
     * @param data.taxFreeId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxfreesByTaxFreeIdAddresses(data: PutApiCrmServiceTaxfreesByTaxFreeIdAddressesData): CancelablePromise<PutApiCrmServiceTaxfreesByTaxFreeIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/taxfrees/{taxFreeId}/addresses',
            path: {
                taxFreeId: data.taxFreeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.ViewEmailList
     * @param data The data for the request.
     * @param data.taxFreeId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxfreesByTaxFreeIdEmails(data: GetApiCrmServiceTaxfreesByTaxFreeIdEmailsData): CancelablePromise<GetApiCrmServiceTaxfreesByTaxFreeIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/taxfrees/{taxFreeId}/emails',
            path: {
                taxFreeId: data.taxFreeId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.EditEmail
     * @param data The data for the request.
     * @param data.taxFreeId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxfreesByTaxFreeIdEmails(data: PutApiCrmServiceTaxfreesByTaxFreeIdEmailsData): CancelablePromise<PutApiCrmServiceTaxfreesByTaxFreeIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/taxfrees/{taxFreeId}/emails',
            path: {
                taxFreeId: data.taxFreeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees, CRMService.TaxFrees.ViewTelephoneList
     * @param data The data for the request.
     * @param data.taxFreeId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxfreesByTaxFreeIdTelephones(data: GetApiCrmServiceTaxfreesByTaxFreeIdTelephonesData): CancelablePromise<GetApiCrmServiceTaxfreesByTaxFreeIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/taxfrees/{taxFreeId}/telephones',
            path: {
                taxFreeId: data.taxFreeId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxFrees
     * @param data The data for the request.
     * @param data.taxFreeId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxfreesByTaxFreeIdTelephones(data: PutApiCrmServiceTaxfreesByTaxFreeIdTelephonesData): CancelablePromise<PutApiCrmServiceTaxfreesByTaxFreeIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/taxfrees/{taxFreeId}/telephones',
            path: {
                taxFreeId: data.taxFreeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class TaxOfficeService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.Create
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceTaxoffices(data: PostApiCrmServiceTaxofficesData = {}): CancelablePromise<PostApiCrmServiceTaxofficesResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/taxoffices',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.ViewList
     * @param data The data for the request.
     * @param data.taxOfficeIds
     * @param data.name
     * @param data.vatNumber
     * @param data.externalStoreIdentifier
     * @param data.parentId
     * @param data.typeCodes
     * @param data.statuses
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxoffices(data: GetApiCrmServiceTaxofficesData = {}): CancelablePromise<GetApiCrmServiceTaxofficesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/taxoffices',
            query: {
                TaxOfficeIds: data.taxOfficeIds,
                Name: data.name,
                VatNumber: data.vatNumber,
                ExternalStoreIdentifier: data.externalStoreIdentifier,
                ParentId: data.parentId,
                TypeCodes: data.typeCodes,
                Statuses: data.statuses,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.CreateAffiliation
     * @param data The data for the request.
     * @param data.taxOfficeId
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public postApiCrmServiceTaxofficesByTaxOfficeIdAffiliations(data: PostApiCrmServiceTaxofficesByTaxOfficeIdAffiliationsData): CancelablePromise<PostApiCrmServiceTaxofficesByTaxOfficeIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/taxoffices/{taxOfficeId}/affiliations',
            path: {
                taxOfficeId: data.taxOfficeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.ViewAffiliationList
     * @param data The data for the request.
     * @param data.taxOfficeId
     * @param data.name
     * @param data.roleName
     * @param data.email
     * @param data.telephone
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxofficesByTaxOfficeIdAffiliations(data: GetApiCrmServiceTaxofficesByTaxOfficeIdAffiliationsData): CancelablePromise<GetApiCrmServiceTaxofficesByTaxOfficeIdAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/taxoffices/{taxOfficeId}/affiliations',
            path: {
                taxOfficeId: data.taxOfficeId
            },
            query: {
                Name: data.name,
                RoleName: data.roleName,
                Email: data.email,
                Telephone: data.telephone,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.Delete
     * @param data The data for the request.
     * @param data.taxOfficeId
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceTaxofficesByTaxOfficeId(data: DeleteApiCrmServiceTaxofficesByTaxOfficeIdData): CancelablePromise<DeleteApiCrmServiceTaxofficesByTaxOfficeIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/taxoffices/{taxOfficeId}',
            path: {
                taxOfficeId: data.taxOfficeId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.View
     * @param data The data for the request.
     * @param data.taxOfficeId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxofficesByTaxOfficeId(data: GetApiCrmServiceTaxofficesByTaxOfficeIdData): CancelablePromise<GetApiCrmServiceTaxofficesByTaxOfficeIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/taxoffices/{taxOfficeId}',
            path: {
                taxOfficeId: data.taxOfficeId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.Edit
     * @param data The data for the request.
     * @param data.taxOfficeId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxofficesByTaxOfficeId(data: PutApiCrmServiceTaxofficesByTaxOfficeIdData): CancelablePromise<PutApiCrmServiceTaxofficesByTaxOfficeIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/taxoffices/{taxOfficeId}',
            path: {
                taxOfficeId: data.taxOfficeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.DeleteAffiliation
     * @param data The data for the request.
     * @param data.taxOfficeId
     * @param data.affiliationId
     * @returns unknown OK
     * @throws ApiError
     */
    public deleteApiCrmServiceTaxofficesByTaxOfficeIdAffiliationsByAffiliationId(data: DeleteApiCrmServiceTaxofficesByTaxOfficeIdAffiliationsByAffiliationIdData): CancelablePromise<DeleteApiCrmServiceTaxofficesByTaxOfficeIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/crm-service/taxoffices/{taxOfficeId}/affiliations/{affiliationId}',
            path: {
                taxOfficeId: data.taxOfficeId,
                affiliationId: data.affiliationId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.EditAffiliation
     * @param data The data for the request.
     * @param data.taxOfficeId
     * @param data.affiliationId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxofficesByTaxOfficeIdAffiliationsByAffiliationId(data: PutApiCrmServiceTaxofficesByTaxOfficeIdAffiliationsByAffiliationIdData): CancelablePromise<PutApiCrmServiceTaxofficesByTaxOfficeIdAffiliationsByAffiliationIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/taxoffices/{taxOfficeId}/affiliations/{affiliationId}',
            path: {
                taxOfficeId: data.taxOfficeId,
                affiliationId: data.affiliationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices
     * @param data The data for the request.
     * @param data.taxOfficeId
     * @returns boolean OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxofficesByTaxOfficeIdExists(data: GetApiCrmServiceTaxofficesByTaxOfficeIdExistsData): CancelablePromise<GetApiCrmServiceTaxofficesByTaxOfficeIdExistsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/taxoffices/{taxOfficeId}/exists',
            path: {
                taxOfficeId: data.taxOfficeId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.EditAddress
     * @param data The data for the request.
     * @param data.taxOfficeId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxofficesByTaxOfficeIdAddresses(data: GetApiCrmServiceTaxofficesByTaxOfficeIdAddressesData): CancelablePromise<GetApiCrmServiceTaxofficesByTaxOfficeIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/taxoffices/{taxOfficeId}/addresses',
            path: {
                taxOfficeId: data.taxOfficeId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.EditAddress
     * @param data The data for the request.
     * @param data.taxOfficeId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxofficesByTaxOfficeIdAddresses(data: PutApiCrmServiceTaxofficesByTaxOfficeIdAddressesData): CancelablePromise<PutApiCrmServiceTaxofficesByTaxOfficeIdAddressesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/taxoffices/{taxOfficeId}/addresses',
            path: {
                taxOfficeId: data.taxOfficeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.ViewEmailList
     * @param data The data for the request.
     * @param data.taxOfficeId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxofficesByTaxOfficeIdEmails(data: GetApiCrmServiceTaxofficesByTaxOfficeIdEmailsData): CancelablePromise<GetApiCrmServiceTaxofficesByTaxOfficeIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/taxoffices/{taxOfficeId}/emails',
            path: {
                taxOfficeId: data.taxOfficeId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.EditEmail
     * @param data The data for the request.
     * @param data.taxOfficeId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxofficesByTaxOfficeIdEmails(data: PutApiCrmServiceTaxofficesByTaxOfficeIdEmailsData): CancelablePromise<PutApiCrmServiceTaxofficesByTaxOfficeIdEmailsResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/taxoffices/{taxOfficeId}/emails',
            path: {
                taxOfficeId: data.taxOfficeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.ViewSubTaxOfficeList
     * @param data The data for the request.
     * @param data.taxOfficeId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxofficesByTaxOfficeIdSubTaxOffices(data: GetApiCrmServiceTaxofficesByTaxOfficeIdSubTaxOfficesData): CancelablePromise<GetApiCrmServiceTaxofficesByTaxOfficeIdSubTaxOfficesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/taxoffices/{taxOfficeId}/sub-taxOffices',
            path: {
                taxOfficeId: data.taxOfficeId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.EditTelephone
     * @param data The data for the request.
     * @param data.taxOfficeId
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceTaxofficesByTaxOfficeIdTelephones(data: GetApiCrmServiceTaxofficesByTaxOfficeIdTelephonesData): CancelablePromise<GetApiCrmServiceTaxofficesByTaxOfficeIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/taxoffices/{taxOfficeId}/telephones',
            path: {
                taxOfficeId: data.taxOfficeId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.TaxOffices, CRMService.TaxOffices.EditTelephone
     * @param data The data for the request.
     * @param data.taxOfficeId
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public putApiCrmServiceTaxofficesByTaxOfficeIdTelephones(data: PutApiCrmServiceTaxofficesByTaxOfficeIdTelephonesData): CancelablePromise<PutApiCrmServiceTaxofficesByTaxOfficeIdTelephonesResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/crm-service/taxoffices/{taxOfficeId}/telephones',
            path: {
                taxOfficeId: data.taxOfficeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class UserAffiliationService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * **Requires permissions:** CRMService.UserAffiliations, CRMService.UserAffiliations.View
     * @returns unknown OK
     * @throws ApiError
     */
    public getApiCrmServiceUserAffiliations(): CancelablePromise<GetApiCrmServiceUserAffiliationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/crm-service/user-affiliations',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * **Requires permissions:** CRMService.UserAffiliations, CRMService.UserAffiliations.SetPrimary
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postApiCrmServiceUserAffiliationsSetActiveAffiliation(data: PostApiCrmServiceUserAffiliationsSetActiveAffiliationData = {}): CancelablePromise<PostApiCrmServiceUserAffiliationsSetActiveAffiliationResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/crm-service/user-affiliations/set-active-affiliation',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Internal Server Error',
                501: 'Not Implemented'
            }
        });
    }
    
}