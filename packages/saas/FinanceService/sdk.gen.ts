// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { GetApiFinanceServiceRebateStatementHeadersByIdData, GetApiFinanceServiceRebateStatementHeadersByIdResponse, GetApiFinanceServiceRebateStatementHeadersData, GetApiFinanceServiceRebateStatementHeadersResponse, PostApiFinanceServiceRebateStatementHeadersData, PostApiFinanceServiceRebateStatementHeadersResponse, PostApiFinanceServiceRebateStatementHeadersFormDraftData, PostApiFinanceServiceRebateStatementHeadersFormDraftResponse, PostApiFinanceServiceRebateStatementHeadersFormBulkPreviewData, PostApiFinanceServiceRebateStatementHeadersFormBulkPreviewResponse, GetApiFinanceServiceVatStatementHeadersByIdData, GetApiFinanceServiceVatStatementHeadersByIdResponse, GetApiFinanceServiceVatStatementHeadersByIdBasicInformationData, GetApiFinanceServiceVatStatementHeadersByIdBasicInformationResponse, GetApiFinanceServiceVatStatementHeadersData, GetApiFinanceServiceVatStatementHeadersResponse, PostApiFinanceServiceVatStatementHeadersData, PostApiFinanceServiceVatStatementHeadersResponse, PostApiFinanceServiceVatStatementHeadersFormDraftData, PostApiFinanceServiceVatStatementHeadersFormDraftResponse, PostApiFinanceServiceVatStatementHeadersFormBulkPreviewData, PostApiFinanceServiceVatStatementHeadersFormBulkPreviewResponse } from './types.gen';

export class RebateStatementHeaderService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiFinanceServiceRebateStatementHeadersById(data: GetApiFinanceServiceRebateStatementHeadersByIdData): CancelablePromise<GetApiFinanceServiceRebateStatementHeadersByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/finance-service/rebate-statement-headers/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiFinanceServiceRebateStatementHeaders(data: GetApiFinanceServiceRebateStatementHeadersData = {}): CancelablePromise<GetApiFinanceServiceRebateStatementHeadersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/finance-service/rebate-statement-headers',
            query: {
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiFinanceServiceRebateStatementHeaders(data: PostApiFinanceServiceRebateStatementHeadersData): CancelablePromise<PostApiFinanceServiceRebateStatementHeadersResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/finance-service/rebate-statement-headers',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiFinanceServiceRebateStatementHeadersFormDraft(data: PostApiFinanceServiceRebateStatementHeadersFormDraftData): CancelablePromise<PostApiFinanceServiceRebateStatementHeadersFormDraftResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/finance-service/rebate-statement-headers/form-draft',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiFinanceServiceRebateStatementHeadersFormBulkPreview(data: PostApiFinanceServiceRebateStatementHeadersFormBulkPreviewData = {}): CancelablePromise<PostApiFinanceServiceRebateStatementHeadersFormBulkPreviewResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/finance-service/rebate-statement-headers/form-bulk-preview',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
}

export class VatStatementHeaderService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiFinanceServiceVatStatementHeadersById(data: GetApiFinanceServiceVatStatementHeadersByIdData): CancelablePromise<GetApiFinanceServiceVatStatementHeadersByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/finance-service/vat-statement-headers/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiFinanceServiceVatStatementHeadersByIdBasicInformation(data: GetApiFinanceServiceVatStatementHeadersByIdBasicInformationData): CancelablePromise<GetApiFinanceServiceVatStatementHeadersByIdBasicInformationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/finance-service/vat-statement-headers/{id}/basic-information',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiFinanceServiceVatStatementHeaders(data: GetApiFinanceServiceVatStatementHeadersData = {}): CancelablePromise<GetApiFinanceServiceVatStatementHeadersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/finance-service/vat-statement-headers',
            query: {
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiFinanceServiceVatStatementHeaders(data: PostApiFinanceServiceVatStatementHeadersData): CancelablePromise<PostApiFinanceServiceVatStatementHeadersResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/finance-service/vat-statement-headers',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiFinanceServiceVatStatementHeadersFormDraft(data: PostApiFinanceServiceVatStatementHeadersFormDraftData): CancelablePromise<PostApiFinanceServiceVatStatementHeadersFormDraftResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/finance-service/vat-statement-headers/form-draft',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiFinanceServiceVatStatementHeadersFormBulkPreview(data: PostApiFinanceServiceVatStatementHeadersFormBulkPreviewData = {}): CancelablePromise<PostApiFinanceServiceVatStatementHeadersFormBulkPreviewResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/finance-service/vat-statement-headers/form-bulk-preview',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
}