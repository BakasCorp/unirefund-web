// This file is auto-generated by @hey-api/openapi-ts

export const $PagedResultDto_AddressCommonDataDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['addressLine', 'cityId', 'countryId', 'districtId', 'fullAddress', 'id', 'postalCode', 'type'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    type: {
                        enum: ['Home', 'Office', 'Invoice', 'Contact'],
                        type: 'string'
                    },
                    addressLine: {
                        maxLength: 255,
                        minLength: 0,
                        type: 'string'
                    },
                    postalCode: {
                        maxLength: 255,
                        minLength: 0,
                        type: 'string'
                    },
                    fullAddress: {
                        maxLength: 255,
                        minLength: 0,
                        type: 'string'
                    },
                    primaryFlag: {
                        type: 'boolean'
                    },
                    countryId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    regionId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    cityId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    districtId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    neighborhoodId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_CityDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['name', 'plateCode', 'regionId'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    name: {
                        maxLength: 255,
                        minLength: 0,
                        type: 'string'
                    },
                    centerLatitudeCoordinate: {
                        type: 'number',
                        format: 'float',
                        nullable: true
                    },
                    centerLongitudeCoordinate: {
                        type: 'number',
                        format: 'float',
                        nullable: true
                    },
                    elevation: {
                        type: 'number',
                        format: 'float',
                        nullable: true
                    },
                    population: {
                        type: 'integer',
                        format: 'int32',
                        nullable: true
                    },
                    isCapital: {
                        type: 'boolean'
                    },
                    isMetropolitan: {
                        type: 'boolean'
                    },
                    plateCode: {
                        type: 'integer',
                        format: 'int32'
                    },
                    regionId: {
                        type: 'string',
                        format: 'uuid'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_CountryDateDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['calendarType', 'endYearForTwoDigitYear', 'firstDayOfWeek', 'longDate', 'shortDate', 'startYearForTwoDigitYear'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    shortDate: {
                        maxLength: 20,
                        minLength: 0,
                        type: 'string'
                    },
                    longDate: {
                        maxLength: 30,
                        minLength: 0,
                        type: 'string'
                    },
                    startYearForTwoDigitYear: {
                        minLength: 1,
                        type: 'string'
                    },
                    endYearForTwoDigitYear: {
                        minLength: 1,
                        type: 'string'
                    },
                    firstDayOfWeek: {
                        enum: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                        type: 'string'
                    },
                    calendarType: {
                        enum: ['Gregorian', 'Julian', 'Hebrew', 'Islamic', 'Buddhist', 'Chinese'],
                        type: 'string'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_CountryDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['code2', 'code3', 'continent', 'countryDateId', 'countryNumberId', 'countryTimeId', 'name', 'timezoneId'],
                type: 'object',
                properties: {
                    extraProperties: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true,
                        readOnly: true
                    },
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    code3: {
                        maxLength: 3,
                        minLength: 0,
                        type: 'string'
                    },
                    code2: {
                        maxLength: 2,
                        minLength: 0,
                        type: 'string'
                    },
                    name: {
                        maxLength: 100,
                        minLength: 0,
                        type: 'string'
                    },
                    flagUrl: {
                        maxLength: 512,
                        minLength: 0,
                        type: 'string',
                        nullable: true
                    },
                    population: {
                        type: 'integer',
                        format: 'int32',
                        nullable: true
                    },
                    isTimezoneCurrentlyDst: {
                        type: 'boolean'
                    },
                    hasRegion: {
                        type: 'boolean'
                    },
                    timezoneId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    countryNumberId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    countryTimeId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    countryDateId: {
                        type: 'string',
                        format: 'uuid'
                    },
                    continent: {
                        enum: ['Asia', 'Africa', 'Europe', 'NorthAmerica', 'SouthAmerica', 'Austrualia', 'Antarctica'],
                        type: 'string'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_CountryNumberDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['decimalSymbol', 'digitGrouping', 'digitGroupingSymbol', 'displayLeadingZeros', 'listSeperator', 'measurementSystem', 'negativeNumberFormat', 'negativeSignSymbol', 'noOfDigitsAfterDecimal', 'standardDigits', 'useNativeDigits'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    decimalSymbol: {
                        maxLength: 1,
                        minLength: 0,
                        type: 'string'
                    },
                    digitGroupingSymbol: {
                        maxLength: 1,
                        minLength: 0,
                        type: 'string'
                    },
                    negativeSignSymbol: {
                        maxLength: 1,
                        minLength: 0,
                        type: 'string'
                    },
                    listSeperator: {
                        maxLength: 1,
                        minLength: 0,
                        type: 'string'
                    },
                    noOfDigitsAfterDecimal: {
                        type: 'integer',
                        format: 'int32'
                    },
                    displayLeadingZeros: {
                        maxLength: 25,
                        minLength: 0,
                        type: 'string'
                    },
                    digitGrouping: {
                        enum: ['FormatWithCommas', 'FormatWithDots'],
                        type: 'string'
                    },
                    negativeNumberFormat: {
                        enum: ['MinusBeforeNumber', 'Parentheses', 'MinusAfterNumber', 'UnicodeMinus'],
                        type: 'string'
                    },
                    measurementSystem: {
                        enum: ['USCustomary', 'Metric', 'Imperial'],
                        type: 'string'
                    },
                    standardDigits: {
                        enum: ['AllDigits', 'DigitsWithoutZero', 'DigitsReversed'],
                        type: 'string'
                    },
                    useNativeDigits: {
                        enum: ['Never', 'Always', 'Conditional'],
                        type: 'string'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_CountryTimeDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['amSymbol', 'longTime', 'pmSymbol', 'shortTime'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    shortTime: {
                        maxLength: 20,
                        minLength: 0,
                        type: 'string'
                    },
                    longTime: {
                        maxLength: 20,
                        minLength: 0,
                        type: 'string'
                    },
                    amSymbol: {
                        maxLength: 2,
                        minLength: 0,
                        type: 'string'
                    },
                    pmSymbol: {
                        maxLength: 2,
                        minLength: 0,
                        type: 'string'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_CurrencyDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['code', 'currencySymbol', 'decimalSymbol', 'digitGrouping', 'digitGroupingSymbol', 'negativeCurrencyFormat', 'noOfDigitsAfterDecimal', 'positiveCurrencyFormat'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    code: {
                        maxLength: 3,
                        minLength: 3,
                        type: 'string'
                    },
                    currencySymbol: {
                        maxLength: 1,
                        minLength: 0,
                        type: 'string'
                    },
                    decimalSymbol: {
                        maxLength: 1,
                        minLength: 0,
                        type: 'string'
                    },
                    digitGroupingSymbol: {
                        maxLength: 1,
                        minLength: 0,
                        type: 'string'
                    },
                    noOfDigitsAfterDecimal: {
                        type: 'integer',
                        format: 'int32'
                    },
                    positiveCurrencyFormat: {
                        enum: ['WithDollarSign', 'WithDollarSignAfter', 'WithCurrencyCodeBefore', 'WithCurrencyCodeAfter', 'WithoutCurrencySymbol'],
                        type: 'string'
                    },
                    negativeCurrencyFormat: {
                        enum: ['WithParentheses', 'WithMinusSign'],
                        type: 'string'
                    },
                    digitGrouping: {
                        enum: ['FormatWithCommas', 'FormatWithDots'],
                        type: 'string'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_DistrictDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['cityId', 'name'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    name: {
                        maxLength: 255,
                        minLength: 0,
                        type: 'string'
                    },
                    population: {
                        type: 'integer',
                        format: 'int32',
                        nullable: true
                    },
                    cityId: {
                        type: 'string',
                        format: 'uuid'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_NeighborhoodDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['districtId', 'isTown', 'name'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    name: {
                        maxLength: 255,
                        minLength: 0,
                        type: 'string'
                    },
                    population: {
                        type: 'integer',
                        format: 'int32',
                        nullable: true
                    },
                    isTown: {
                        type: 'boolean'
                    },
                    districtId: {
                        type: 'string',
                        format: 'uuid'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_RegionDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['countryId', 'name'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    name: {
                        maxLength: 100,
                        minLength: 0,
                        type: 'string'
                    },
                    population: {
                        type: 'integer',
                        format: 'int32',
                        nullable: true
                    },
                    regionalSetting: {
                        required: ['regionId'],
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string',
                                format: 'uuid'
                            },
                            creationTime: {
                                type: 'string',
                                format: 'date-time'
                            },
                            creatorId: {
                                type: 'string',
                                format: 'uuid',
                                nullable: true
                            },
                            lastModificationTime: {
                                type: 'string',
                                format: 'date-time',
                                nullable: true
                            },
                            lastModifierId: {
                                type: 'string',
                                format: 'uuid',
                                nullable: true
                            },
                            isDeleted: {
                                type: 'boolean'
                            },
                            deleterId: {
                                type: 'string',
                                format: 'uuid',
                                nullable: true
                            },
                            deletionTime: {
                                type: 'string',
                                format: 'date-time',
                                nullable: true
                            },
                            regionId: {
                                type: 'string',
                                format: 'uuid'
                            }
                        },
                        additionalProperties: false
                    },
                    countryId: {
                        type: 'string',
                        format: 'uuid'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $PagedResultDto_RegionalSettingDto = {
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                required: ['regionId'],
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        format: 'uuid'
                    },
                    creationTime: {
                        type: 'string',
                        format: 'date-time'
                    },
                    creatorId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    lastModificationTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    lastModifierId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    isDeleted: {
                        type: 'boolean'
                    },
                    deleterId: {
                        type: 'string',
                        format: 'uuid',
                        nullable: true
                    },
                    deletionTime: {
                        type: 'string',
                        format: 'date-time',
                        nullable: true
                    },
                    regionId: {
                        type: 'string',
                        format: 'uuid'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        totalCount: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_AddressCommonDatas_AddressCommonDataCreateDto = {
    required: ['addressLine', 'countryId', 'type'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        type: {
            enum: ['Home', 'Office', 'Invoice', 'Contact'],
            type: 'string'
        },
        addressLine: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        postalCode: {
            type: 'string',
            nullable: true
        },
        primaryFlag: {
            type: 'boolean'
        },
        countryId: {
            type: 'string',
            format: 'uuid'
        },
        regionId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        cityId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        districtId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        neighborhoodId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_AddressCommonDatas_AddressCommonDataDto = {
    required: ['addressLine', 'cityId', 'countryId', 'districtId', 'fullAddress', 'id', 'postalCode', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        type: {
            enum: ['Home', 'Office', 'Invoice', 'Contact'],
            type: 'string'
        },
        addressLine: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        postalCode: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        fullAddress: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        primaryFlag: {
            type: 'boolean'
        },
        countryId: {
            type: 'string',
            format: 'uuid'
        },
        regionId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        cityId: {
            type: 'string',
            format: 'uuid'
        },
        districtId: {
            type: 'string',
            format: 'uuid'
        },
        neighborhoodId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_AddressCommonDatas_AddressCommonDataUpdateDto = {
    required: ['addressLine', 'countryId', 'postalCode', 'type'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        type: {
            enum: ['Home', 'Office', 'Invoice', 'Contact'],
            type: 'string'
        },
        addressLine: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        postalCode: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        primaryFlag: {
            type: 'boolean'
        },
        countryId: {
            type: 'string',
            format: 'uuid'
        },
        regionId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        cityId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        districtId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        neighborhoodId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Cities_CityCreateDto = {
    required: ['name', 'plateCode', 'regionId'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        centerLatitudeCoordinate: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        centerLongitudeCoordinate: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        elevation: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        population: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        isCapital: {
            type: 'boolean'
        },
        isMetropolitan: {
            type: 'boolean'
        },
        plateCode: {
            type: 'integer',
            format: 'int32'
        },
        timezoneId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        regionId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Cities_CityDto = {
    required: ['name', 'plateCode', 'regionId'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        centerLatitudeCoordinate: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        centerLongitudeCoordinate: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        elevation: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        population: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        isCapital: {
            type: 'boolean'
        },
        isMetropolitan: {
            type: 'boolean'
        },
        plateCode: {
            type: 'integer',
            format: 'int32'
        },
        regionId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Cities_CityUpdateDto = {
    required: ['name', 'plateCode', 'regionId'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        centerLatitudeCoordinate: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        centerLongitudeCoordinate: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        elevation: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        population: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        isCapital: {
            type: 'boolean'
        },
        isMetropolitan: {
            type: 'boolean'
        },
        plateCode: {
            type: 'integer',
            format: 'int32'
        },
        timezoneId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        regionId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Countries_CountryCreateDto = {
    required: ['code2', 'code3', 'continent', 'countryDateId', 'countryNumberId', 'countryTimeId', 'name', 'timezoneId'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        code3: {
            maxLength: 3,
            minLength: 0,
            type: 'string'
        },
        code2: {
            maxLength: 2,
            minLength: 0,
            type: 'string'
        },
        name: {
            maxLength: 100,
            minLength: 0,
            type: 'string'
        },
        flagUrl: {
            maxLength: 512,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        population: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        isTimezoneCurrentlyDst: {
            type: 'boolean'
        },
        hasRegion: {
            type: 'boolean'
        },
        timezoneId: {
            type: 'string',
            format: 'uuid'
        },
        countryNumberId: {
            type: 'string',
            format: 'uuid'
        },
        countryTimeId: {
            type: 'string',
            format: 'uuid'
        },
        countryDateId: {
            type: 'string',
            format: 'uuid'
        },
        continent: {
            enum: ['Asia', 'Africa', 'Europe', 'NorthAmerica', 'SouthAmerica', 'Austrualia', 'Antarctica'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Countries_CountryDto = {
    required: ['code2', 'code3', 'continent', 'countryDateId', 'countryNumberId', 'countryTimeId', 'name', 'timezoneId'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        code3: {
            maxLength: 3,
            minLength: 0,
            type: 'string'
        },
        code2: {
            maxLength: 2,
            minLength: 0,
            type: 'string'
        },
        name: {
            maxLength: 100,
            minLength: 0,
            type: 'string'
        },
        flagUrl: {
            maxLength: 512,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        population: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        isTimezoneCurrentlyDst: {
            type: 'boolean'
        },
        hasRegion: {
            type: 'boolean'
        },
        timezoneId: {
            type: 'string',
            format: 'uuid'
        },
        countryNumberId: {
            type: 'string',
            format: 'uuid'
        },
        countryTimeId: {
            type: 'string',
            format: 'uuid'
        },
        countryDateId: {
            type: 'string',
            format: 'uuid'
        },
        continent: {
            enum: ['Asia', 'Africa', 'Europe', 'NorthAmerica', 'SouthAmerica', 'Austrualia', 'Antarctica'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Countries_CountryInfoDto = {
    type: 'object',
    properties: {
        code3: {
            type: 'string',
            nullable: true
        },
        code2: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Countries_CountryUpdateDto = {
    required: ['code2', 'code3', 'continent', 'countryDateId', 'countryNumberId', 'countryTimeId', 'name', 'timezoneId'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        code3: {
            maxLength: 3,
            minLength: 0,
            type: 'string'
        },
        code2: {
            maxLength: 2,
            minLength: 0,
            type: 'string'
        },
        name: {
            maxLength: 100,
            minLength: 0,
            type: 'string'
        },
        flagUrl: {
            maxLength: 512,
            minLength: 0,
            type: 'string',
            nullable: true
        },
        population: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        isTimezoneCurrentlyDst: {
            type: 'boolean'
        },
        hasRegion: {
            type: 'boolean'
        },
        timezoneId: {
            type: 'string',
            format: 'uuid'
        },
        countryNumberId: {
            type: 'string',
            format: 'uuid'
        },
        countryTimeId: {
            type: 'string',
            format: 'uuid'
        },
        countryDateId: {
            type: 'string',
            format: 'uuid'
        },
        continent: {
            enum: ['Asia', 'Africa', 'Europe', 'NorthAmerica', 'SouthAmerica', 'Austrualia', 'Antarctica'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Countries_GetCountryNameDto = {
    type: 'object',
    properties: {
        code2: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_CountryDates_CountryDateCreateDto = {
    required: ['calendarType', 'endYearForTwoDigitYear', 'firstDayOfWeek', 'longDate', 'shortDate', 'startYearForTwoDigitYear'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        shortDate: {
            maxLength: 20,
            minLength: 0,
            type: 'string'
        },
        longDate: {
            maxLength: 30,
            minLength: 0,
            type: 'string'
        },
        startYearForTwoDigitYear: {
            minLength: 1,
            type: 'string'
        },
        endYearForTwoDigitYear: {
            minLength: 1,
            type: 'string'
        },
        firstDayOfWeek: {
            enum: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
            type: 'string'
        },
        calendarType: {
            enum: ['Gregorian', 'Julian', 'Hebrew', 'Islamic', 'Buddhist', 'Chinese'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_CountryDates_CountryDateDto = {
    required: ['calendarType', 'endYearForTwoDigitYear', 'firstDayOfWeek', 'longDate', 'shortDate', 'startYearForTwoDigitYear'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        shortDate: {
            maxLength: 20,
            minLength: 0,
            type: 'string'
        },
        longDate: {
            maxLength: 30,
            minLength: 0,
            type: 'string'
        },
        startYearForTwoDigitYear: {
            minLength: 1,
            type: 'string'
        },
        endYearForTwoDigitYear: {
            minLength: 1,
            type: 'string'
        },
        firstDayOfWeek: {
            enum: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
            type: 'string'
        },
        calendarType: {
            enum: ['Gregorian', 'Julian', 'Hebrew', 'Islamic', 'Buddhist', 'Chinese'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_CountryDates_CountryDateUpdateDto = {
    required: ['calendarType', 'endYearForTwoDigitYear', 'firstDayOfWeek', 'longDate', 'shortDate', 'startYearForTwoDigitYear'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        shortDate: {
            maxLength: 20,
            minLength: 0,
            type: 'string'
        },
        longDate: {
            maxLength: 30,
            minLength: 0,
            type: 'string'
        },
        startYearForTwoDigitYear: {
            minLength: 1,
            type: 'string'
        },
        endYearForTwoDigitYear: {
            minLength: 1,
            type: 'string'
        },
        firstDayOfWeek: {
            enum: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
            type: 'string'
        },
        calendarType: {
            enum: ['Gregorian', 'Julian', 'Hebrew', 'Islamic', 'Buddhist', 'Chinese'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_CountryNumbers_CountryNumberCreateDto = {
    required: ['decimalSymbol', 'digitGrouping', 'digitGroupingSymbol', 'displayLeadingZeros', 'listSeperator', 'measurementSystem', 'negativeNumberFormat', 'negativeSignSymbol', 'noOfDigitsAfterDecimal', 'standardDigits', 'useNativeDigits'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        decimalSymbol: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        digitGroupingSymbol: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        negativeSignSymbol: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        listSeperator: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        noOfDigitsAfterDecimal: {
            type: 'integer',
            format: 'int32'
        },
        displayLeadingZeros: {
            maxLength: 25,
            minLength: 0,
            type: 'string'
        },
        digitGrouping: {
            enum: ['FormatWithCommas', 'FormatWithDots'],
            type: 'string'
        },
        negativeNumberFormat: {
            enum: ['MinusBeforeNumber', 'Parentheses', 'MinusAfterNumber', 'UnicodeMinus'],
            type: 'string'
        },
        measurementSystem: {
            enum: ['USCustomary', 'Metric', 'Imperial'],
            type: 'string'
        },
        standardDigits: {
            enum: ['AllDigits', 'DigitsWithoutZero', 'DigitsReversed'],
            type: 'string'
        },
        useNativeDigits: {
            enum: ['Never', 'Always', 'Conditional'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_CountryNumbers_CountryNumberDto = {
    required: ['decimalSymbol', 'digitGrouping', 'digitGroupingSymbol', 'displayLeadingZeros', 'listSeperator', 'measurementSystem', 'negativeNumberFormat', 'negativeSignSymbol', 'noOfDigitsAfterDecimal', 'standardDigits', 'useNativeDigits'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        decimalSymbol: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        digitGroupingSymbol: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        negativeSignSymbol: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        listSeperator: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        noOfDigitsAfterDecimal: {
            type: 'integer',
            format: 'int32'
        },
        displayLeadingZeros: {
            maxLength: 25,
            minLength: 0,
            type: 'string'
        },
        digitGrouping: {
            enum: ['FormatWithCommas', 'FormatWithDots'],
            type: 'string'
        },
        negativeNumberFormat: {
            enum: ['MinusBeforeNumber', 'Parentheses', 'MinusAfterNumber', 'UnicodeMinus'],
            type: 'string'
        },
        measurementSystem: {
            enum: ['USCustomary', 'Metric', 'Imperial'],
            type: 'string'
        },
        standardDigits: {
            enum: ['AllDigits', 'DigitsWithoutZero', 'DigitsReversed'],
            type: 'string'
        },
        useNativeDigits: {
            enum: ['Never', 'Always', 'Conditional'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_CountryNumbers_CountryNumberUpdateDto = {
    required: ['decimalSymbol', 'digitGrouping', 'digitGroupingSymbol', 'displayLeadingZeros', 'listSeperator', 'measurementSystem', 'negativeNumberFormat', 'negativeSignSymbol', 'noOfDigitsAfterDecimal', 'standardDigits', 'useNativeDigits'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        decimalSymbol: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        digitGroupingSymbol: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        negativeSignSymbol: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        listSeperator: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        noOfDigitsAfterDecimal: {
            type: 'integer',
            format: 'int32'
        },
        displayLeadingZeros: {
            maxLength: 25,
            minLength: 0,
            type: 'string'
        },
        digitGrouping: {
            enum: ['FormatWithCommas', 'FormatWithDots'],
            type: 'string'
        },
        negativeNumberFormat: {
            enum: ['MinusBeforeNumber', 'Parentheses', 'MinusAfterNumber', 'UnicodeMinus'],
            type: 'string'
        },
        measurementSystem: {
            enum: ['USCustomary', 'Metric', 'Imperial'],
            type: 'string'
        },
        standardDigits: {
            enum: ['AllDigits', 'DigitsWithoutZero', 'DigitsReversed'],
            type: 'string'
        },
        useNativeDigits: {
            enum: ['Never', 'Always', 'Conditional'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_CountryTimes_CountryTimeCreateDto = {
    required: ['amSymbol', 'longTime', 'pmSymbol', 'shortTime'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        shortTime: {
            maxLength: 20,
            minLength: 0,
            type: 'string'
        },
        longTime: {
            maxLength: 20,
            minLength: 0,
            type: 'string'
        },
        amSymbol: {
            maxLength: 2,
            minLength: 0,
            type: 'string'
        },
        pmSymbol: {
            maxLength: 2,
            minLength: 0,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_CountryTimes_CountryTimeDto = {
    required: ['amSymbol', 'longTime', 'pmSymbol', 'shortTime'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        shortTime: {
            maxLength: 20,
            minLength: 0,
            type: 'string'
        },
        longTime: {
            maxLength: 20,
            minLength: 0,
            type: 'string'
        },
        amSymbol: {
            maxLength: 2,
            minLength: 0,
            type: 'string'
        },
        pmSymbol: {
            maxLength: 2,
            minLength: 0,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_CountryTimes_CountryTimeUpdateDto = {
    required: ['amSymbol', 'longTime', 'pmSymbol', 'shortTime'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        shortTime: {
            maxLength: 20,
            minLength: 0,
            type: 'string'
        },
        longTime: {
            maxLength: 20,
            minLength: 0,
            type: 'string'
        },
        amSymbol: {
            maxLength: 2,
            minLength: 0,
            type: 'string'
        },
        pmSymbol: {
            maxLength: 2,
            minLength: 0,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Currencies_CurrencyCreateDto = {
    required: ['code', 'currencySymbol', 'decimalSymbol', 'digitGrouping', 'digitGroupingSymbol', 'negativeCurrencyFormat', 'noOfDigitsAfterDecimal', 'positiveCurrencyFormat'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        code: {
            maxLength: 3,
            minLength: 3,
            type: 'string'
        },
        currencySymbol: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        decimalSymbol: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        digitGroupingSymbol: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        noOfDigitsAfterDecimal: {
            type: 'integer',
            format: 'int32'
        },
        positiveCurrencyFormat: {
            enum: ['WithDollarSign', 'WithDollarSignAfter', 'WithCurrencyCodeBefore', 'WithCurrencyCodeAfter', 'WithoutCurrencySymbol'],
            type: 'string'
        },
        negativeCurrencyFormat: {
            enum: ['WithParentheses', 'WithMinusSign'],
            type: 'string'
        },
        digitGrouping: {
            enum: ['FormatWithCommas', 'FormatWithDots'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Currencies_CurrencyDto = {
    required: ['code', 'currencySymbol', 'decimalSymbol', 'digitGrouping', 'digitGroupingSymbol', 'negativeCurrencyFormat', 'noOfDigitsAfterDecimal', 'positiveCurrencyFormat'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        code: {
            maxLength: 3,
            minLength: 3,
            type: 'string'
        },
        currencySymbol: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        decimalSymbol: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        digitGroupingSymbol: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        noOfDigitsAfterDecimal: {
            type: 'integer',
            format: 'int32'
        },
        positiveCurrencyFormat: {
            enum: ['WithDollarSign', 'WithDollarSignAfter', 'WithCurrencyCodeBefore', 'WithCurrencyCodeAfter', 'WithoutCurrencySymbol'],
            type: 'string'
        },
        negativeCurrencyFormat: {
            enum: ['WithParentheses', 'WithMinusSign'],
            type: 'string'
        },
        digitGrouping: {
            enum: ['FormatWithCommas', 'FormatWithDots'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Currencies_CurrencyUpdateDto = {
    required: ['code', 'currencySymbol', 'decimalSymbol', 'digitGrouping', 'digitGroupingSymbol', 'negativeCurrencyFormat', 'noOfDigitsAfterDecimal', 'positiveCurrencyFormat'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        code: {
            maxLength: 3,
            minLength: 3,
            type: 'string'
        },
        currencySymbol: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        decimalSymbol: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        digitGroupingSymbol: {
            maxLength: 1,
            minLength: 0,
            type: 'string'
        },
        noOfDigitsAfterDecimal: {
            type: 'integer',
            format: 'int32'
        },
        positiveCurrencyFormat: {
            enum: ['WithDollarSign', 'WithDollarSignAfter', 'WithCurrencyCodeBefore', 'WithCurrencyCodeAfter', 'WithoutCurrencySymbol'],
            type: 'string'
        },
        negativeCurrencyFormat: {
            enum: ['WithParentheses', 'WithMinusSign'],
            type: 'string'
        },
        digitGrouping: {
            enum: ['FormatWithCommas', 'FormatWithDots'],
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Districts_DistrictCreateDto = {
    required: ['cityId', 'name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        population: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        cityId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Districts_DistrictDto = {
    required: ['cityId', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        population: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        cityId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Districts_DistrictUpdateDto = {
    required: ['cityId', 'name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        population: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        cityId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Enums_AddressType = {
    enum: ['Home', 'Office', 'Invoice', 'Contact'],
    type: 'string'
} as const;

export const $UniRefund_LocationService_Enums_CalendarType = {
    enum: ['Gregorian', 'Julian', 'Hebrew', 'Islamic', 'Buddhist', 'Chinese'],
    type: 'string'
} as const;

export const $UniRefund_LocationService_Enums_Continent = {
    enum: ['Asia', 'Africa', 'Europe', 'NorthAmerica', 'SouthAmerica', 'Austrualia', 'Antarctica'],
    type: 'string'
} as const;

export const $UniRefund_LocationService_Enums_DigitGrouping = {
    enum: ['FormatWithCommas', 'FormatWithDots'],
    type: 'string'
} as const;

export const $UniRefund_LocationService_Enums_FirstDayOfWeek = {
    enum: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    type: 'string'
} as const;

export const $UniRefund_LocationService_Enums_MeasurementSystem = {
    enum: ['USCustomary', 'Metric', 'Imperial'],
    type: 'string'
} as const;

export const $UniRefund_LocationService_Enums_NegativeCurrencyFormat = {
    enum: ['WithParentheses', 'WithMinusSign'],
    type: 'string'
} as const;

export const $UniRefund_LocationService_Enums_NegativeNumberFormat = {
    enum: ['MinusBeforeNumber', 'Parentheses', 'MinusAfterNumber', 'UnicodeMinus'],
    type: 'string'
} as const;

export const $UniRefund_LocationService_Enums_PositiveCurrencyFormat = {
    enum: ['WithDollarSign', 'WithDollarSignAfter', 'WithCurrencyCodeBefore', 'WithCurrencyCodeAfter', 'WithoutCurrencySymbol'],
    type: 'string'
} as const;

export const $UniRefund_LocationService_Enums_StandardDigits = {
    enum: ['AllDigits', 'DigitsWithoutZero', 'DigitsReversed'],
    type: 'string'
} as const;

export const $UniRefund_LocationService_Enums_UseNativeDigits = {
    enum: ['Never', 'Always', 'Conditional'],
    type: 'string'
} as const;

export const $UniRefund_LocationService_Neighborhoods_NeighborhoodCreateDto = {
    required: ['districtId', 'isTown', 'name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        population: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        isTown: {
            type: 'boolean'
        },
        districtId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Neighborhoods_NeighborhoodDto = {
    required: ['districtId', 'isTown', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        population: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        isTown: {
            type: 'boolean'
        },
        districtId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Neighborhoods_NeighborhoodUpdateDto = {
    required: ['districtId', 'isTown', 'name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        population: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        isTown: {
            type: 'boolean'
        },
        districtId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_RegionalSettings_RegionalSettingCreateDto = {
    required: ['regionId'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        regionId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_RegionalSettings_RegionalSettingDto = {
    required: ['regionId'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        regionId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_RegionalSettings_RegionalSettingUpdateDto = {
    required: ['regionId'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        regionId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Regions_RegionCreateDto = {
    required: ['countryId', 'name'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 100,
            minLength: 0,
            type: 'string'
        },
        population: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        timezoneId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        countryId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Regions_RegionDto = {
    required: ['countryId', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        creationTime: {
            type: 'string',
            format: 'date-time'
        },
        creatorId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        lastModificationTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastModifierId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        isDeleted: {
            type: 'boolean'
        },
        deleterId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        deletionTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        name: {
            maxLength: 100,
            minLength: 0,
            type: 'string'
        },
        population: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        regionalSetting: {
            required: ['regionId'],
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid'
                },
                creationTime: {
                    type: 'string',
                    format: 'date-time'
                },
                creatorId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                lastModificationTime: {
                    type: 'string',
                    format: 'date-time',
                    nullable: true
                },
                lastModifierId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                isDeleted: {
                    type: 'boolean'
                },
                deleterId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                deletionTime: {
                    type: 'string',
                    format: 'date-time',
                    nullable: true
                },
                regionId: {
                    type: 'string',
                    format: 'uuid'
                }
            },
            additionalProperties: false
        },
        countryId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $UniRefund_LocationService_Regions_RegionUpdateDto = {
    required: ['countryId', 'name', 'regionalSettingId'],
    type: 'object',
    properties: {
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        name: {
            maxLength: 100,
            minLength: 0,
            type: 'string'
        },
        population: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        timezoneId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        regionalSettingId: {
            type: 'string',
            format: 'uuid'
        },
        countryId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationAuthConfigurationDto = {
    type: 'object',
    properties: {
        grantedPolicies: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationConfigurationDto = {
    type: 'object',
    properties: {
        localization: {
            type: 'object',
            properties: {
                values: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        additionalProperties: {
                            type: 'string'
                        }
                    },
                    nullable: true
                },
                resources: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        properties: {
                            texts: {
                                type: 'object',
                                additionalProperties: {
                                    type: 'string'
                                },
                                nullable: true
                            },
                            baseResources: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                },
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                },
                languages: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            cultureName: {
                                type: 'string',
                                nullable: true
                            },
                            uiCultureName: {
                                type: 'string',
                                nullable: true
                            },
                            displayName: {
                                type: 'string',
                                nullable: true
                            },
                            twoLetterISOLanguageName: {
                                type: 'string',
                                nullable: true,
                                readOnly: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                },
                currentCulture: {
                    type: 'object',
                    properties: {
                        displayName: {
                            type: 'string',
                            nullable: true
                        },
                        englishName: {
                            type: 'string',
                            nullable: true
                        },
                        threeLetterIsoLanguageName: {
                            type: 'string',
                            nullable: true
                        },
                        twoLetterIsoLanguageName: {
                            type: 'string',
                            nullable: true
                        },
                        isRightToLeft: {
                            type: 'boolean'
                        },
                        cultureName: {
                            type: 'string',
                            nullable: true
                        },
                        name: {
                            type: 'string',
                            nullable: true
                        },
                        nativeName: {
                            type: 'string',
                            nullable: true
                        },
                        dateTimeFormat: {
                            type: 'object',
                            properties: {
                                calendarAlgorithmType: {
                                    type: 'string',
                                    nullable: true
                                },
                                dateTimeFormatLong: {
                                    type: 'string',
                                    nullable: true
                                },
                                shortDatePattern: {
                                    type: 'string',
                                    nullable: true
                                },
                                fullDateTimePattern: {
                                    type: 'string',
                                    nullable: true
                                },
                                dateSeparator: {
                                    type: 'string',
                                    nullable: true
                                },
                                shortTimePattern: {
                                    type: 'string',
                                    nullable: true
                                },
                                longTimePattern: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    additionalProperties: false
                },
                defaultResourceName: {
                    type: 'string',
                    nullable: true
                },
                languagesMap: {
                    type: 'object',
                    additionalProperties: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                value: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    nullable: true
                },
                languageFilesMap: {
                    type: 'object',
                    additionalProperties: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                value: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        auth: {
            type: 'object',
            properties: {
                grantedPolicies: {
                    type: 'object',
                    additionalProperties: {
                        type: 'boolean'
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        setting: {
            type: 'object',
            properties: {
                values: {
                    type: 'object',
                    additionalProperties: {
                        type: 'string',
                        nullable: true
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        currentUser: {
            type: 'object',
            properties: {
                isAuthenticated: {
                    type: 'boolean'
                },
                id: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                tenantId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                impersonatorUserId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                impersonatorTenantId: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                impersonatorUserName: {
                    type: 'string',
                    nullable: true
                },
                impersonatorTenantName: {
                    type: 'string',
                    nullable: true
                },
                userName: {
                    type: 'string',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                surName: {
                    type: 'string',
                    nullable: true
                },
                email: {
                    type: 'string',
                    nullable: true
                },
                emailVerified: {
                    type: 'boolean'
                },
                phoneNumber: {
                    type: 'string',
                    nullable: true
                },
                phoneNumberVerified: {
                    type: 'boolean'
                },
                roles: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    nullable: true
                },
                sessionId: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        features: {
            type: 'object',
            properties: {
                values: {
                    type: 'object',
                    additionalProperties: {
                        type: 'string',
                        nullable: true
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        globalFeatures: {
            type: 'object',
            properties: {
                enabledFeatures: {
                    uniqueItems: true,
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        multiTenancy: {
            type: 'object',
            properties: {
                isEnabled: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        currentTenant: {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    format: 'uuid',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        timing: {
            type: 'object',
            properties: {
                timeZone: {
                    type: 'object',
                    properties: {
                        iana: {
                            type: 'object',
                            properties: {
                                timeZoneName: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        windows: {
                            type: 'object',
                            properties: {
                                timeZoneId: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        clock: {
            type: 'object',
            properties: {
                kind: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        objectExtensions: {
            type: 'object',
            properties: {
                modules: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        properties: {
                            entities: {
                                type: 'object',
                                additionalProperties: {
                                    type: 'object',
                                    properties: {
                                        properties: {
                                            type: 'object',
                                            additionalProperties: {
                                                type: 'object',
                                                properties: {
                                                    type: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    typeSimple: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    displayName: {
                                                        type: 'object',
                                                        properties: {
                                                            name: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            resource: {
                                                                type: 'string',
                                                                nullable: true
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    api: {
                                                        type: 'object',
                                                        properties: {
                                                            onGet: {
                                                                type: 'object',
                                                                properties: {
                                                                    isAvailable: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onCreate: {
                                                                type: 'object',
                                                                properties: {
                                                                    isAvailable: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onUpdate: {
                                                                type: 'object',
                                                                properties: {
                                                                    isAvailable: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    ui: {
                                                        type: 'object',
                                                        properties: {
                                                            onTable: {
                                                                type: 'object',
                                                                properties: {
                                                                    isVisible: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onCreateForm: {
                                                                type: 'object',
                                                                properties: {
                                                                    isVisible: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            onEditForm: {
                                                                type: 'object',
                                                                properties: {
                                                                    isVisible: {
                                                                        type: 'boolean'
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            lookup: {
                                                                type: 'object',
                                                                properties: {
                                                                    url: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    resultListPropertyName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    displayPropertyName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    valuePropertyName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    filterParamName: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    attributes: {
                                                        type: 'array',
                                                        items: {
                                                            type: 'object',
                                                            properties: {
                                                                typeSimple: {
                                                                    type: 'string',
                                                                    nullable: true
                                                                },
                                                                config: {
                                                                    type: 'object',
                                                                    additionalProperties: {},
                                                                    nullable: true
                                                                }
                                                            },
                                                            additionalProperties: false
                                                        },
                                                        nullable: true
                                                    },
                                                    configuration: {
                                                        type: 'object',
                                                        additionalProperties: {},
                                                        nullable: true
                                                    },
                                                    defaultValue: {
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            nullable: true
                                        },
                                        configuration: {
                                            type: 'object',
                                            additionalProperties: {},
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                nullable: true
                            },
                            configuration: {
                                type: 'object',
                                additionalProperties: {},
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                },
                enums: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        properties: {
                            fields: {
                                type: 'array',
                                items: {
                                    type: 'object',
                                    properties: {
                                        name: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        value: {
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                nullable: true
                            },
                            localizationResource: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        },
        extraProperties: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationFeatureConfigurationDto = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationGlobalFeatureConfigurationDto = {
    type: 'object',
    properties: {
        enabledFeatures: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationLocalizationConfigurationDto = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                additionalProperties: {
                    type: 'string'
                }
            },
            nullable: true
        },
        resources: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    texts: {
                        type: 'object',
                        additionalProperties: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    baseResources: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        languages: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    cultureName: {
                        type: 'string',
                        nullable: true
                    },
                    uiCultureName: {
                        type: 'string',
                        nullable: true
                    },
                    displayName: {
                        type: 'string',
                        nullable: true
                    },
                    twoLetterISOLanguageName: {
                        type: 'string',
                        nullable: true,
                        readOnly: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        currentCulture: {
            type: 'object',
            properties: {
                displayName: {
                    type: 'string',
                    nullable: true
                },
                englishName: {
                    type: 'string',
                    nullable: true
                },
                threeLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                twoLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                isRightToLeft: {
                    type: 'boolean'
                },
                cultureName: {
                    type: 'string',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                nativeName: {
                    type: 'string',
                    nullable: true
                },
                dateTimeFormat: {
                    type: 'object',
                    properties: {
                        calendarAlgorithmType: {
                            type: 'string',
                            nullable: true
                        },
                        dateTimeFormatLong: {
                            type: 'string',
                            nullable: true
                        },
                        shortDatePattern: {
                            type: 'string',
                            nullable: true
                        },
                        fullDateTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        dateSeparator: {
                            type: 'string',
                            nullable: true
                        },
                        shortTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        longTimePattern: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        defaultResourceName: {
            type: 'string',
            nullable: true
        },
        languagesMap: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string',
                            nullable: true
                        },
                        value: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            nullable: true
        },
        languageFilesMap: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string',
                            nullable: true
                        },
                        value: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationLocalizationDto = {
    type: 'object',
    properties: {
        resources: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    texts: {
                        type: 'object',
                        additionalProperties: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    baseResources: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        currentCulture: {
            type: 'object',
            properties: {
                displayName: {
                    type: 'string',
                    nullable: true
                },
                englishName: {
                    type: 'string',
                    nullable: true
                },
                threeLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                twoLetterIsoLanguageName: {
                    type: 'string',
                    nullable: true
                },
                isRightToLeft: {
                    type: 'boolean'
                },
                cultureName: {
                    type: 'string',
                    nullable: true
                },
                name: {
                    type: 'string',
                    nullable: true
                },
                nativeName: {
                    type: 'string',
                    nullable: true
                },
                dateTimeFormat: {
                    type: 'object',
                    properties: {
                        calendarAlgorithmType: {
                            type: 'string',
                            nullable: true
                        },
                        dateTimeFormatLong: {
                            type: 'string',
                            nullable: true
                        },
                        shortDatePattern: {
                            type: 'string',
                            nullable: true
                        },
                        fullDateTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        dateSeparator: {
                            type: 'string',
                            nullable: true
                        },
                        shortTimePattern: {
                            type: 'string',
                            nullable: true
                        },
                        longTimePattern: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationLocalizationResourceDto = {
    type: 'object',
    properties: {
        texts: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true
        },
        baseResources: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ApplicationSettingConfigurationDto = {
    type: 'object',
    properties: {
        values: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ClockDto = {
    type: 'object',
    properties: {
        kind: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_CurrentCultureDto = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string',
            nullable: true
        },
        englishName: {
            type: 'string',
            nullable: true
        },
        threeLetterIsoLanguageName: {
            type: 'string',
            nullable: true
        },
        twoLetterIsoLanguageName: {
            type: 'string',
            nullable: true
        },
        isRightToLeft: {
            type: 'boolean'
        },
        cultureName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        nativeName: {
            type: 'string',
            nullable: true
        },
        dateTimeFormat: {
            type: 'object',
            properties: {
                calendarAlgorithmType: {
                    type: 'string',
                    nullable: true
                },
                dateTimeFormatLong: {
                    type: 'string',
                    nullable: true
                },
                shortDatePattern: {
                    type: 'string',
                    nullable: true
                },
                fullDateTimePattern: {
                    type: 'string',
                    nullable: true
                },
                dateSeparator: {
                    type: 'string',
                    nullable: true
                },
                shortTimePattern: {
                    type: 'string',
                    nullable: true
                },
                longTimePattern: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_CurrentUserDto = {
    type: 'object',
    properties: {
        isAuthenticated: {
            type: 'boolean'
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        tenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorUserId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorTenantId: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        impersonatorUserName: {
            type: 'string',
            nullable: true
        },
        impersonatorTenantName: {
            type: 'string',
            nullable: true
        },
        userName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        surName: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        emailVerified: {
            type: 'boolean'
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        phoneNumberVerified: {
            type: 'boolean'
        },
        roles: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        sessionId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_DateTimeFormatDto = {
    type: 'object',
    properties: {
        calendarAlgorithmType: {
            type: 'string',
            nullable: true
        },
        dateTimeFormatLong: {
            type: 'string',
            nullable: true
        },
        shortDatePattern: {
            type: 'string',
            nullable: true
        },
        fullDateTimePattern: {
            type: 'string',
            nullable: true
        },
        dateSeparator: {
            type: 'string',
            nullable: true
        },
        shortTimePattern: {
            type: 'string',
            nullable: true
        },
        longTimePattern: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_IanaTimeZone = {
    type: 'object',
    properties: {
        timeZoneName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_EntityExtensionDto = {
    type: 'object',
    properties: {
        properties: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    displayName: {
                        type: 'object',
                        properties: {
                            name: {
                                type: 'string',
                                nullable: true
                            },
                            resource: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    api: {
                        type: 'object',
                        properties: {
                            onGet: {
                                type: 'object',
                                properties: {
                                    isAvailable: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onCreate: {
                                type: 'object',
                                properties: {
                                    isAvailable: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onUpdate: {
                                type: 'object',
                                properties: {
                                    isAvailable: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            }
                        },
                        additionalProperties: false
                    },
                    ui: {
                        type: 'object',
                        properties: {
                            onTable: {
                                type: 'object',
                                properties: {
                                    isVisible: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onCreateForm: {
                                type: 'object',
                                properties: {
                                    isVisible: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            onEditForm: {
                                type: 'object',
                                properties: {
                                    isVisible: {
                                        type: 'boolean'
                                    }
                                },
                                additionalProperties: false
                            },
                            lookup: {
                                type: 'object',
                                properties: {
                                    url: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    resultListPropertyName: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    displayPropertyName: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    valuePropertyName: {
                                        type: 'string',
                                        nullable: true
                                    },
                                    filterParamName: {
                                        type: 'string',
                                        nullable: true
                                    }
                                },
                                additionalProperties: false
                            }
                        },
                        additionalProperties: false
                    },
                    attributes: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                config: {
                                    type: 'object',
                                    additionalProperties: {},
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    configuration: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    },
                    defaultValue: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionEnumDto = {
    type: 'object',
    properties: {
        fields: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    value: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        localizationResource: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionEnumFieldDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        value: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiCreateDto = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiDto = {
    type: 'object',
    properties: {
        onGet: {
            type: 'object',
            properties: {
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onCreate: {
            type: 'object',
            properties: {
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onUpdate: {
            type: 'object',
            properties: {
                isAvailable: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiGetDto = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyApiUpdateDto = {
    type: 'object',
    properties: {
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyAttributeDto = {
    type: 'object',
    properties: {
        typeSimple: {
            type: 'string',
            nullable: true
        },
        config: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyDto = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'object',
            properties: {
                name: {
                    type: 'string',
                    nullable: true
                },
                resource: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        api: {
            type: 'object',
            properties: {
                onGet: {
                    type: 'object',
                    properties: {
                        isAvailable: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onCreate: {
                    type: 'object',
                    properties: {
                        isAvailable: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onUpdate: {
                    type: 'object',
                    properties: {
                        isAvailable: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        ui: {
            type: 'object',
            properties: {
                onTable: {
                    type: 'object',
                    properties: {
                        isVisible: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onCreateForm: {
                    type: 'object',
                    properties: {
                        isVisible: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                onEditForm: {
                    type: 'object',
                    properties: {
                        isVisible: {
                            type: 'boolean'
                        }
                    },
                    additionalProperties: false
                },
                lookup: {
                    type: 'object',
                    properties: {
                        url: {
                            type: 'string',
                            nullable: true
                        },
                        resultListPropertyName: {
                            type: 'string',
                            nullable: true
                        },
                        displayPropertyName: {
                            type: 'string',
                            nullable: true
                        },
                        valuePropertyName: {
                            type: 'string',
                            nullable: true
                        },
                        filterParamName: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        },
        attributes: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    config: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        },
        defaultValue: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiDto = {
    type: 'object',
    properties: {
        onTable: {
            type: 'object',
            properties: {
                isVisible: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onCreateForm: {
            type: 'object',
            properties: {
                isVisible: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        onEditForm: {
            type: 'object',
            properties: {
                isVisible: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        lookup: {
            type: 'object',
            properties: {
                url: {
                    type: 'string',
                    nullable: true
                },
                resultListPropertyName: {
                    type: 'string',
                    nullable: true
                },
                displayPropertyName: {
                    type: 'string',
                    nullable: true
                },
                valuePropertyName: {
                    type: 'string',
                    nullable: true
                },
                filterParamName: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiFormDto = {
    type: 'object',
    properties: {
        isVisible: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiLookupDto = {
    type: 'object',
    properties: {
        url: {
            type: 'string',
            nullable: true
        },
        resultListPropertyName: {
            type: 'string',
            nullable: true
        },
        displayPropertyName: {
            type: 'string',
            nullable: true
        },
        valuePropertyName: {
            type: 'string',
            nullable: true
        },
        filterParamName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ExtensionPropertyUiTableDto = {
    type: 'object',
    properties: {
        isVisible: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_LocalizableStringDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        resource: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ModuleExtensionDto = {
    type: 'object',
    properties: {
        entities: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    properties: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                displayName: {
                                    type: 'object',
                                    properties: {
                                        name: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        resource: {
                                            type: 'string',
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                api: {
                                    type: 'object',
                                    properties: {
                                        onGet: {
                                            type: 'object',
                                            properties: {
                                                isAvailable: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onCreate: {
                                            type: 'object',
                                            properties: {
                                                isAvailable: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onUpdate: {
                                            type: 'object',
                                            properties: {
                                                isAvailable: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        }
                                    },
                                    additionalProperties: false
                                },
                                ui: {
                                    type: 'object',
                                    properties: {
                                        onTable: {
                                            type: 'object',
                                            properties: {
                                                isVisible: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onCreateForm: {
                                            type: 'object',
                                            properties: {
                                                isVisible: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        onEditForm: {
                                            type: 'object',
                                            properties: {
                                                isVisible: {
                                                    type: 'boolean'
                                                }
                                            },
                                            additionalProperties: false
                                        },
                                        lookup: {
                                            type: 'object',
                                            properties: {
                                                url: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                resultListPropertyName: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                displayPropertyName: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                valuePropertyName: {
                                                    type: 'string',
                                                    nullable: true
                                                },
                                                filterParamName: {
                                                    type: 'string',
                                                    nullable: true
                                                }
                                            },
                                            additionalProperties: false
                                        }
                                    },
                                    additionalProperties: false
                                },
                                attributes: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            config: {
                                                type: 'object',
                                                additionalProperties: {},
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                configuration: {
                                    type: 'object',
                                    additionalProperties: {},
                                    nullable: true
                                },
                                defaultValue: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    configuration: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        configuration: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_ObjectExtending_ObjectExtensionsDto = {
    type: 'object',
    properties: {
        modules: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    entities: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                properties: {
                                    type: 'object',
                                    additionalProperties: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            displayName: {
                                                type: 'object',
                                                properties: {
                                                    name: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    resource: {
                                                        type: 'string',
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            api: {
                                                type: 'object',
                                                properties: {
                                                    onGet: {
                                                        type: 'object',
                                                        properties: {
                                                            isAvailable: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onCreate: {
                                                        type: 'object',
                                                        properties: {
                                                            isAvailable: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onUpdate: {
                                                        type: 'object',
                                                        properties: {
                                                            isAvailable: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            ui: {
                                                type: 'object',
                                                properties: {
                                                    onTable: {
                                                        type: 'object',
                                                        properties: {
                                                            isVisible: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onCreateForm: {
                                                        type: 'object',
                                                        properties: {
                                                            isVisible: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    onEditForm: {
                                                        type: 'object',
                                                        properties: {
                                                            isVisible: {
                                                                type: 'boolean'
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    },
                                                    lookup: {
                                                        type: 'object',
                                                        properties: {
                                                            url: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            resultListPropertyName: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            displayPropertyName: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            valuePropertyName: {
                                                                type: 'string',
                                                                nullable: true
                                                            },
                                                            filterParamName: {
                                                                type: 'string',
                                                                nullable: true
                                                            }
                                                        },
                                                        additionalProperties: false
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            attributes: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        config: {
                                                            type: 'object',
                                                            additionalProperties: {},
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            configuration: {
                                                type: 'object',
                                                additionalProperties: {},
                                                nullable: true
                                            },
                                            defaultValue: {
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                configuration: {
                                    type: 'object',
                                    additionalProperties: {},
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    configuration: {
                        type: 'object',
                        additionalProperties: {},
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        enums: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    fields: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                value: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    localizationResource: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_TimeZone = {
    type: 'object',
    properties: {
        iana: {
            type: 'object',
            properties: {
                timeZoneName: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        windows: {
            type: 'object',
            properties: {
                timeZoneId: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_TimingDto = {
    type: 'object',
    properties: {
        timeZone: {
            type: 'object',
            properties: {
                iana: {
                    type: 'object',
                    properties: {
                        timeZoneName: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                },
                windows: {
                    type: 'object',
                    properties: {
                        timeZoneId: {
                            type: 'string',
                            nullable: true
                        }
                    },
                    additionalProperties: false
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_ApplicationConfigurations_WindowsTimeZone = {
    type: 'object',
    properties: {
        timeZoneId: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_MultiTenancy_CurrentTenantDto = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        isAvailable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_AspNetCore_Mvc_MultiTenancy_MultiTenancyInfoDto = {
    type: 'object',
    properties: {
        isEnabled: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ActionApiDescriptionModel = {
    type: 'object',
    properties: {
        uniqueName: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        httpMethod: {
            type: 'string',
            nullable: true
        },
        url: {
            type: 'string',
            nullable: true
        },
        supportedVersions: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        parametersOnMethod: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    typeAsString: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isOptional: {
                        type: 'boolean'
                    },
                    defaultValue: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        parameters: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    nameOnMethod: {
                        type: 'string',
                        nullable: true
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    jsonName: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isOptional: {
                        type: 'boolean'
                    },
                    defaultValue: {
                        nullable: true
                    },
                    constraintTypes: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    bindingSourceId: {
                        type: 'string',
                        nullable: true
                    },
                    descriptorName: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        returnValue: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    nullable: true
                },
                typeSimple: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        },
        allowAnonymous: {
            type: 'boolean',
            nullable: true
        },
        implementFrom: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ApplicationApiDescriptionModel = {
    type: 'object',
    properties: {
        modules: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    rootPath: {
                        type: 'string',
                        nullable: true
                    },
                    remoteServiceName: {
                        type: 'string',
                        nullable: true
                    },
                    controllers: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                controllerName: {
                                    type: 'string',
                                    nullable: true
                                },
                                controllerGroupName: {
                                    type: 'string',
                                    nullable: true
                                },
                                isRemoteService: {
                                    type: 'boolean'
                                },
                                isIntegrationService: {
                                    type: 'boolean'
                                },
                                apiVersion: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                interfaces: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            methods: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        parametersOnMethod: {
                                                            type: 'array',
                                                            items: {
                                                                type: 'object',
                                                                properties: {
                                                                    name: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    typeAsString: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    type: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    typeSimple: {
                                                                        type: 'string',
                                                                        nullable: true
                                                                    },
                                                                    isOptional: {
                                                                        type: 'boolean'
                                                                    },
                                                                    defaultValue: {
                                                                        nullable: true
                                                                    }
                                                                },
                                                                additionalProperties: false
                                                            },
                                                            nullable: true
                                                        },
                                                        returnValue: {
                                                            type: 'object',
                                                            properties: {
                                                                type: {
                                                                    type: 'string',
                                                                    nullable: true
                                                                },
                                                                typeSimple: {
                                                                    type: 'string',
                                                                    nullable: true
                                                                }
                                                            },
                                                            additionalProperties: false
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                actions: {
                                    type: 'object',
                                    additionalProperties: {
                                        type: 'object',
                                        properties: {
                                            uniqueName: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            httpMethod: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            url: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            supportedVersions: {
                                                type: 'array',
                                                items: {
                                                    type: 'string'
                                                },
                                                nullable: true
                                            },
                                            parametersOnMethod: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeAsString: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        type: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        isOptional: {
                                                            type: 'boolean'
                                                        },
                                                        defaultValue: {
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            parameters: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        nameOnMethod: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        jsonName: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        type: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        isOptional: {
                                                            type: 'boolean'
                                                        },
                                                        defaultValue: {
                                                            nullable: true
                                                        },
                                                        constraintTypes: {
                                                            type: 'array',
                                                            items: {
                                                                type: 'string'
                                                            },
                                                            nullable: true
                                                        },
                                                        bindingSourceId: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        descriptorName: {
                                                            type: 'string',
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            returnValue: {
                                                type: 'object',
                                                properties: {
                                                    type: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    typeSimple: {
                                                        type: 'string',
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            },
                                            allowAnonymous: {
                                                type: 'boolean',
                                                nullable: true
                                            },
                                            implementFrom: {
                                                type: 'string',
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        types: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    baseType: {
                        type: 'string',
                        nullable: true
                    },
                    isEnum: {
                        type: 'boolean'
                    },
                    enumNames: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    enumValues: {
                        type: 'array',
                        items: {},
                        nullable: true
                    },
                    genericArguments: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    properties: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                jsonName: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isRequired: {
                                    type: 'boolean'
                                },
                                minLength: {
                                    type: 'integer',
                                    format: 'int32',
                                    nullable: true
                                },
                                maxLength: {
                                    type: 'integer',
                                    format: 'int32',
                                    nullable: true
                                },
                                minimum: {
                                    type: 'string',
                                    nullable: true
                                },
                                maximum: {
                                    type: 'string',
                                    nullable: true
                                },
                                regex: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ControllerApiDescriptionModel = {
    type: 'object',
    properties: {
        controllerName: {
            type: 'string',
            nullable: true
        },
        controllerGroupName: {
            type: 'string',
            nullable: true
        },
        isRemoteService: {
            type: 'boolean'
        },
        isIntegrationService: {
            type: 'boolean'
        },
        apiVersion: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        interfaces: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    methods: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                parametersOnMethod: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeAsString: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            isOptional: {
                                                type: 'boolean'
                                            },
                                            defaultValue: {
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                returnValue: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        typeSimple: {
                                            type: 'string',
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        actions: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    uniqueName: {
                        type: 'string',
                        nullable: true
                    },
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    httpMethod: {
                        type: 'string',
                        nullable: true
                    },
                    url: {
                        type: 'string',
                        nullable: true
                    },
                    supportedVersions: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    },
                    parametersOnMethod: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeAsString: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isOptional: {
                                    type: 'boolean'
                                },
                                defaultValue: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    parameters: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                nameOnMethod: {
                                    type: 'string',
                                    nullable: true
                                },
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                jsonName: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isOptional: {
                                    type: 'boolean'
                                },
                                defaultValue: {
                                    nullable: true
                                },
                                constraintTypes: {
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    },
                                    nullable: true
                                },
                                bindingSourceId: {
                                    type: 'string',
                                    nullable: true
                                },
                                descriptorName: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    returnValue: {
                        type: 'object',
                        properties: {
                            type: {
                                type: 'string',
                                nullable: true
                            },
                            typeSimple: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    allowAnonymous: {
                        type: 'boolean',
                        nullable: true
                    },
                    implementFrom: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ControllerInterfaceApiDescriptionModel = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        methods: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    parametersOnMethod: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeAsString: {
                                    type: 'string',
                                    nullable: true
                                },
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                typeSimple: {
                                    type: 'string',
                                    nullable: true
                                },
                                isOptional: {
                                    type: 'boolean'
                                },
                                defaultValue: {
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    returnValue: {
                        type: 'object',
                        properties: {
                            type: {
                                type: 'string',
                                nullable: true
                            },
                            typeSimple: {
                                type: 'string',
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_InterfaceMethodApiDescriptionModel = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        parametersOnMethod: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    typeAsString: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isOptional: {
                        type: 'boolean'
                    },
                    defaultValue: {
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        },
        returnValue: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    nullable: true
                },
                typeSimple: {
                    type: 'string',
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_MethodParameterApiDescriptionModel = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        typeAsString: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isOptional: {
            type: 'boolean'
        },
        defaultValue: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ModuleApiDescriptionModel = {
    type: 'object',
    properties: {
        rootPath: {
            type: 'string',
            nullable: true
        },
        remoteServiceName: {
            type: 'string',
            nullable: true
        },
        controllers: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    controllerName: {
                        type: 'string',
                        nullable: true
                    },
                    controllerGroupName: {
                        type: 'string',
                        nullable: true
                    },
                    isRemoteService: {
                        type: 'boolean'
                    },
                    isIntegrationService: {
                        type: 'boolean'
                    },
                    apiVersion: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    interfaces: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    nullable: true
                                },
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                methods: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            parametersOnMethod: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        name: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeAsString: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        type: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        typeSimple: {
                                                            type: 'string',
                                                            nullable: true
                                                        },
                                                        isOptional: {
                                                            type: 'boolean'
                                                        },
                                                        defaultValue: {
                                                            nullable: true
                                                        }
                                                    },
                                                    additionalProperties: false
                                                },
                                                nullable: true
                                            },
                                            returnValue: {
                                                type: 'object',
                                                properties: {
                                                    type: {
                                                        type: 'string',
                                                        nullable: true
                                                    },
                                                    typeSimple: {
                                                        type: 'string',
                                                        nullable: true
                                                    }
                                                },
                                                additionalProperties: false
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    },
                    actions: {
                        type: 'object',
                        additionalProperties: {
                            type: 'object',
                            properties: {
                                uniqueName: {
                                    type: 'string',
                                    nullable: true
                                },
                                name: {
                                    type: 'string',
                                    nullable: true
                                },
                                httpMethod: {
                                    type: 'string',
                                    nullable: true
                                },
                                url: {
                                    type: 'string',
                                    nullable: true
                                },
                                supportedVersions: {
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    },
                                    nullable: true
                                },
                                parametersOnMethod: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeAsString: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            isOptional: {
                                                type: 'boolean'
                                            },
                                            defaultValue: {
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                parameters: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            nameOnMethod: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            name: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            jsonName: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            type: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            typeSimple: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            isOptional: {
                                                type: 'boolean'
                                            },
                                            defaultValue: {
                                                nullable: true
                                            },
                                            constraintTypes: {
                                                type: 'array',
                                                items: {
                                                    type: 'string'
                                                },
                                                nullable: true
                                            },
                                            bindingSourceId: {
                                                type: 'string',
                                                nullable: true
                                            },
                                            descriptorName: {
                                                type: 'string',
                                                nullable: true
                                            }
                                        },
                                        additionalProperties: false
                                    },
                                    nullable: true
                                },
                                returnValue: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            nullable: true
                                        },
                                        typeSimple: {
                                            type: 'string',
                                            nullable: true
                                        }
                                    },
                                    additionalProperties: false
                                },
                                allowAnonymous: {
                                    type: 'boolean',
                                    nullable: true
                                },
                                implementFrom: {
                                    type: 'string',
                                    nullable: true
                                }
                            },
                            additionalProperties: false
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ParameterApiDescriptionModel = {
    type: 'object',
    properties: {
        nameOnMethod: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        jsonName: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isOptional: {
            type: 'boolean'
        },
        defaultValue: {
            nullable: true
        },
        constraintTypes: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        bindingSourceId: {
            type: 'string',
            nullable: true
        },
        descriptorName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_PropertyApiDescriptionModel = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        jsonName: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        },
        isRequired: {
            type: 'boolean'
        },
        minLength: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        maxLength: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        minimum: {
            type: 'string',
            nullable: true
        },
        maximum: {
            type: 'string',
            nullable: true
        },
        regex: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_ReturnValueApiDescriptionModel = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        typeSimple: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_Modeling_TypeApiDescriptionModel = {
    type: 'object',
    properties: {
        baseType: {
            type: 'string',
            nullable: true
        },
        isEnum: {
            type: 'boolean'
        },
        enumNames: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        enumValues: {
            type: 'array',
            items: {},
            nullable: true
        },
        genericArguments: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        properties: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string',
                        nullable: true
                    },
                    jsonName: {
                        type: 'string',
                        nullable: true
                    },
                    type: {
                        type: 'string',
                        nullable: true
                    },
                    typeSimple: {
                        type: 'string',
                        nullable: true
                    },
                    isRequired: {
                        type: 'boolean'
                    },
                    minLength: {
                        type: 'integer',
                        format: 'int32',
                        nullable: true
                    },
                    maxLength: {
                        type: 'integer',
                        format: 'int32',
                        nullable: true
                    },
                    minimum: {
                        type: 'string',
                        nullable: true
                    },
                    maximum: {
                        type: 'string',
                        nullable: true
                    },
                    regex: {
                        type: 'string',
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_RemoteServiceErrorInfo = {
    type: 'object',
    properties: {
        code: {
            type: 'string',
            nullable: true
        },
        message: {
            type: 'string',
            nullable: true
        },
        details: {
            type: 'string',
            nullable: true
        },
        data: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        },
        validationErrors: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    message: {
                        type: 'string',
                        nullable: true
                    },
                    members: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        nullable: true
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_RemoteServiceErrorResponse = {
    type: 'object',
    properties: {
        error: {
            type: 'object',
            properties: {
                code: {
                    type: 'string',
                    nullable: true
                },
                message: {
                    type: 'string',
                    nullable: true
                },
                details: {
                    type: 'string',
                    nullable: true
                },
                data: {
                    type: 'object',
                    additionalProperties: {},
                    nullable: true
                },
                validationErrors: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            message: {
                                type: 'string',
                                nullable: true
                            },
                            members: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                },
                                nullable: true
                            }
                        },
                        additionalProperties: false
                    },
                    nullable: true
                }
            },
            additionalProperties: false
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Http_RemoteServiceValidationErrorInfo = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            nullable: true
        },
        members: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_Localization_LanguageInfo = {
    type: 'object',
    properties: {
        cultureName: {
            type: 'string',
            nullable: true
        },
        uiCultureName: {
            type: 'string',
            nullable: true
        },
        displayName: {
            type: 'string',
            nullable: true
        },
        twoLetterISOLanguageName: {
            type: 'string',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $Volo_Abp_NameValue = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        value: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;