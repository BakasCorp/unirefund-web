// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { GetApiContractServiceMerchantsContractsContractHeadersByIdData, GetApiContractServiceMerchantsContractsContractHeadersByIdResponse, PutApiContractServiceMerchantsContractsContractHeadersByIdData, PutApiContractServiceMerchantsContractsContractHeadersByIdResponse, DeleteApiContractServiceMerchantsContractsContractHeadersByIdData, DeleteApiContractServiceMerchantsContractsContractHeadersByIdResponse, GetApiContractServiceMerchantsContractsContractHeadersData, GetApiContractServiceMerchantsContractsContractHeadersResponse, GetApiContractServiceMerchantsByIdContractsContractHeadersData, GetApiContractServiceMerchantsByIdContractsContractHeadersResponse, PostApiContractServiceMerchantsByIdContractsContractHeadersData, PostApiContractServiceMerchantsByIdContractsContractHeadersResponse, PostApiContractServiceMerchantsContractsContractHeadersByIdValidateData, PostApiContractServiceMerchantsContractsContractHeadersByIdValidateResponse, PutApiContractServiceMerchantsContractsContractHeadersByIdMakePassiveData, PutApiContractServiceMerchantsContractsContractHeadersByIdMakePassiveResponse, GetApiContractServiceMerchantsContractsContractHeadersByIdRebateSettingsData, GetApiContractServiceMerchantsContractsContractHeadersByIdRebateSettingsResponse, PostApiContractServiceMerchantsContractsContractHeadersByIdRebateSettingsData, PostApiContractServiceMerchantsContractsContractHeadersByIdRebateSettingsResponse, GetApiContractServiceMerchantsContractsContractSettingsByIdData, GetApiContractServiceMerchantsContractsContractSettingsByIdResponse, PutApiContractServiceMerchantsContractsContractSettingsByIdData, PutApiContractServiceMerchantsContractsContractSettingsByIdResponse, DeleteApiContractServiceMerchantsContractsContractSettingsByIdData, DeleteApiContractServiceMerchantsContractsContractSettingsByIdResponse, GetApiContractServiceMerchantsContractsContractHeadersByIdContractSettingsData, GetApiContractServiceMerchantsContractsContractHeadersByIdContractSettingsResponse, PostApiContractServiceMerchantsContractsContractHeadersByIdContractSettingsData, PostApiContractServiceMerchantsContractsContractHeadersByIdContractSettingsResponse, PutApiContractServiceMerchantsContractsContractHeadersByIdSetDefaultSettingData, PutApiContractServiceMerchantsContractsContractHeadersByIdSetDefaultSettingResponse, GetApiContractServiceMerchantsContractsContractHeadersByIdContractStoresData, GetApiContractServiceMerchantsContractsContractHeadersByIdContractStoresResponse, PostApiContractServiceMerchantsContractsContractHeadersByIdContractStoresData, PostApiContractServiceMerchantsContractsContractHeadersByIdContractStoresResponse, GetApiContractServiceRefundPointsContractsContractHeadersByIdData, GetApiContractServiceRefundPointsContractsContractHeadersByIdResponse, PutApiContractServiceRefundPointsContractsContractHeadersByIdData, PutApiContractServiceRefundPointsContractsContractHeadersByIdResponse, DeleteApiContractServiceRefundPointsContractsContractHeadersByIdData, DeleteApiContractServiceRefundPointsContractsContractHeadersByIdResponse, GetApiContractServiceRefundPointsContractsContractHeadersData, GetApiContractServiceRefundPointsContractsContractHeadersResponse, GetApiContractServiceRefundPointsByIdContractsContractHeadersData, GetApiContractServiceRefundPointsByIdContractsContractHeadersResponse, PostApiContractServiceRefundPointsByIdContractsContractHeadersData, PostApiContractServiceRefundPointsByIdContractsContractHeadersResponse, PostApiContractServiceRefundPointsContractsContractHeadersByIdValidateData, PostApiContractServiceRefundPointsContractsContractHeadersByIdValidateResponse, PutApiContractServiceRefundPointsContractsContractHeadersByIdMakePassiveData, PutApiContractServiceRefundPointsContractsContractHeadersByIdMakePassiveResponse, GetApiContractServiceRebateTableHeadersAssignablesByMerchantData, GetApiContractServiceRebateTableHeadersAssignablesByMerchantResponse, GetApiContractServiceRebateTableHeadersByIdData, GetApiContractServiceRebateTableHeadersByIdResponse, PutApiContractServiceRebateTableHeadersByIdData, PutApiContractServiceRebateTableHeadersByIdResponse, GetApiContractServiceRebateTableHeadersData, GetApiContractServiceRebateTableHeadersResponse, PostApiContractServiceRebateTableHeadersData, PostApiContractServiceRebateTableHeadersResponse, PostApiContractServiceRebateTableHeadersCloneByIdData, PostApiContractServiceRebateTableHeadersCloneByIdResponse, GetApiContractServiceRefundFeeHeadersAssignablesByRefundPointData, GetApiContractServiceRefundFeeHeadersAssignablesByRefundPointResponse, GetApiContractServiceRefundFeeHeadersByIdData, GetApiContractServiceRefundFeeHeadersByIdResponse, PutApiContractServiceRefundFeeHeadersByIdData, PutApiContractServiceRefundFeeHeadersByIdResponse, GetApiContractServiceRefundFeeHeadersData, GetApiContractServiceRefundFeeHeadersResponse, PostApiContractServiceRefundFeeHeadersData, PostApiContractServiceRefundFeeHeadersResponse, PostApiContractServiceRefundFeeHeadersCloneByIdData, PostApiContractServiceRefundFeeHeadersCloneByIdResponse, GetApiContractServiceRefundTableHeadersAssignablesByMerchantData, GetApiContractServiceRefundTableHeadersAssignablesByMerchantResponse, GetApiContractServiceRefundTableHeadersByIdData, GetApiContractServiceRefundTableHeadersByIdResponse, PutApiContractServiceRefundTableHeadersByIdData, PutApiContractServiceRefundTableHeadersByIdResponse, GetApiContractServiceRefundTableHeadersData, GetApiContractServiceRefundTableHeadersResponse, PostApiContractServiceRefundTableHeadersData, PostApiContractServiceRefundTableHeadersResponse, PostApiContractServiceRefundTableHeadersCloneByIdData, PostApiContractServiceRefundTableHeadersCloneByIdResponse } from './types.gen';

export class ContractsMerchantService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiContractServiceMerchantsContractsContractHeadersById(data: GetApiContractServiceMerchantsContractsContractHeadersByIdData): CancelablePromise<GetApiContractServiceMerchantsContractsContractHeadersByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/contract-service/merchants/contracts/contract-headers/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public putApiContractServiceMerchantsContractsContractHeadersById(data: PutApiContractServiceMerchantsContractsContractHeadersByIdData): CancelablePromise<PutApiContractServiceMerchantsContractsContractHeadersByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/contract-service/merchants/contracts/contract-headers/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiContractServiceMerchantsContractsContractHeadersById(data: DeleteApiContractServiceMerchantsContractsContractHeadersByIdData): CancelablePromise<DeleteApiContractServiceMerchantsContractsContractHeadersByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/contract-service/merchants/contracts/contract-headers/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.isDraft
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiContractServiceMerchantsContractsContractHeaders(data: GetApiContractServiceMerchantsContractsContractHeadersData = {}): CancelablePromise<GetApiContractServiceMerchantsContractsContractHeadersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/contract-service/merchants/contracts/contract-headers',
            query: {
                IsDraft: data.isDraft,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.isDraft
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiContractServiceMerchantsByIdContractsContractHeaders(data: GetApiContractServiceMerchantsByIdContractsContractHeadersData): CancelablePromise<GetApiContractServiceMerchantsByIdContractsContractHeadersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/contract-service/merchants/{id}/contracts/contract-headers',
            path: {
                id: data.id
            },
            query: {
                IsDraft: data.isDraft,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiContractServiceMerchantsByIdContractsContractHeaders(data: PostApiContractServiceMerchantsByIdContractsContractHeadersData): CancelablePromise<PostApiContractServiceMerchantsByIdContractsContractHeadersResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/contract-service/merchants/{id}/contracts/contract-headers',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns boolean Success
     * @throws ApiError
     */
    public postApiContractServiceMerchantsContractsContractHeadersByIdValidate(data: PostApiContractServiceMerchantsContractsContractHeadersByIdValidateData): CancelablePromise<PostApiContractServiceMerchantsContractsContractHeadersByIdValidateResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/contract-service/merchants/contracts/contract-headers/{id}/validate',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public putApiContractServiceMerchantsContractsContractHeadersByIdMakePassive(data: PutApiContractServiceMerchantsContractsContractHeadersByIdMakePassiveData): CancelablePromise<PutApiContractServiceMerchantsContractsContractHeadersByIdMakePassiveResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/contract-service/merchants/contracts/contract-headers/{id}/make-passive',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiContractServiceMerchantsContractsContractHeadersByIdRebateSettings(data: GetApiContractServiceMerchantsContractsContractHeadersByIdRebateSettingsData): CancelablePromise<GetApiContractServiceMerchantsContractsContractHeadersByIdRebateSettingsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/contract-service/merchants/contracts/contract-headers/{id}/rebate-settings',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiContractServiceMerchantsContractsContractHeadersByIdRebateSettings(data: PostApiContractServiceMerchantsContractsContractHeadersByIdRebateSettingsData): CancelablePromise<PostApiContractServiceMerchantsContractsContractHeadersByIdRebateSettingsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/contract-service/merchants/contracts/contract-headers/{id}/rebate-settings',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiContractServiceMerchantsContractsContractSettingsById(data: GetApiContractServiceMerchantsContractsContractSettingsByIdData): CancelablePromise<GetApiContractServiceMerchantsContractsContractSettingsByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/contract-service/merchants/contracts/contract-settings/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public putApiContractServiceMerchantsContractsContractSettingsById(data: PutApiContractServiceMerchantsContractsContractSettingsByIdData): CancelablePromise<PutApiContractServiceMerchantsContractsContractSettingsByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/contract-service/merchants/contracts/contract-settings/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiContractServiceMerchantsContractsContractSettingsById(data: DeleteApiContractServiceMerchantsContractsContractSettingsByIdData): CancelablePromise<DeleteApiContractServiceMerchantsContractsContractSettingsByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/contract-service/merchants/contracts/contract-settings/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiContractServiceMerchantsContractsContractHeadersByIdContractSettings(data: GetApiContractServiceMerchantsContractsContractHeadersByIdContractSettingsData): CancelablePromise<GetApiContractServiceMerchantsContractsContractHeadersByIdContractSettingsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/contract-service/merchants/contracts/contract-headers/{id}/contract-settings',
            path: {
                id: data.id
            },
            query: {
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiContractServiceMerchantsContractsContractHeadersByIdContractSettings(data: PostApiContractServiceMerchantsContractsContractHeadersByIdContractSettingsData): CancelablePromise<PostApiContractServiceMerchantsContractsContractHeadersByIdContractSettingsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/contract-service/merchants/contracts/contract-headers/{id}/contract-settings',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public putApiContractServiceMerchantsContractsContractHeadersByIdSetDefaultSetting(data: PutApiContractServiceMerchantsContractsContractHeadersByIdSetDefaultSettingData): CancelablePromise<PutApiContractServiceMerchantsContractsContractHeadersByIdSetDefaultSettingResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/contract-service/merchants/contracts/contract-headers/{id}/set-default-setting',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiContractServiceMerchantsContractsContractHeadersByIdContractStores(data: GetApiContractServiceMerchantsContractsContractHeadersByIdContractStoresData): CancelablePromise<GetApiContractServiceMerchantsContractsContractHeadersByIdContractStoresResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/contract-service/merchants/contracts/contract-headers/{id}/contract-stores',
            path: {
                id: data.id
            },
            query: {
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiContractServiceMerchantsContractsContractHeadersByIdContractStores(data: PostApiContractServiceMerchantsContractsContractHeadersByIdContractStoresData): CancelablePromise<PostApiContractServiceMerchantsContractsContractHeadersByIdContractStoresResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/contract-service/merchants/contracts/contract-headers/{id}/contract-stores',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
}

export class ContractsRefundPointService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiContractServiceRefundPointsContractsContractHeadersById(data: GetApiContractServiceRefundPointsContractsContractHeadersByIdData): CancelablePromise<GetApiContractServiceRefundPointsContractsContractHeadersByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/contract-service/refund-points/contracts/contract-headers/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public putApiContractServiceRefundPointsContractsContractHeadersById(data: PutApiContractServiceRefundPointsContractsContractHeadersByIdData): CancelablePromise<PutApiContractServiceRefundPointsContractsContractHeadersByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/contract-service/refund-points/contracts/contract-headers/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public deleteApiContractServiceRefundPointsContractsContractHeadersById(data: DeleteApiContractServiceRefundPointsContractsContractHeadersByIdData): CancelablePromise<DeleteApiContractServiceRefundPointsContractsContractHeadersByIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/contract-service/refund-points/contracts/contract-headers/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.isDraft
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiContractServiceRefundPointsContractsContractHeaders(data: GetApiContractServiceRefundPointsContractsContractHeadersData = {}): CancelablePromise<GetApiContractServiceRefundPointsContractsContractHeadersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/contract-service/refund-points/contracts/contract-headers',
            query: {
                IsDraft: data.isDraft,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.isDraft
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiContractServiceRefundPointsByIdContractsContractHeaders(data: GetApiContractServiceRefundPointsByIdContractsContractHeadersData): CancelablePromise<GetApiContractServiceRefundPointsByIdContractsContractHeadersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/contract-service/refund-points/{id}/contracts/contract-headers',
            path: {
                id: data.id
            },
            query: {
                IsDraft: data.isDraft,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiContractServiceRefundPointsByIdContractsContractHeaders(data: PostApiContractServiceRefundPointsByIdContractsContractHeadersData): CancelablePromise<PostApiContractServiceRefundPointsByIdContractsContractHeadersResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/contract-service/refund-points/{id}/contracts/contract-headers',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns boolean Success
     * @throws ApiError
     */
    public postApiContractServiceRefundPointsContractsContractHeadersByIdValidate(data: PostApiContractServiceRefundPointsContractsContractHeadersByIdValidateData): CancelablePromise<PostApiContractServiceRefundPointsContractsContractHeadersByIdValidateResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/contract-service/refund-points/contracts/contract-headers/{id}/validate',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public putApiContractServiceRefundPointsContractsContractHeadersByIdMakePassive(data: PutApiContractServiceRefundPointsContractsContractHeadersByIdMakePassiveData): CancelablePromise<PutApiContractServiceRefundPointsContractsContractHeadersByIdMakePassiveResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/contract-service/refund-points/contracts/contract-headers/{id}/make-passive',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
}

export class RebateTableHeaderService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.merchantId
     * @param data.sorting
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiContractServiceRebateTableHeadersAssignablesByMerchant(data: GetApiContractServiceRebateTableHeadersAssignablesByMerchantData): CancelablePromise<GetApiContractServiceRebateTableHeadersAssignablesByMerchantResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/contract-service/rebate-table-headers/assignables-by-merchant',
            query: {
                merchantId: data.merchantId,
                sorting: data.sorting
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiContractServiceRebateTableHeadersById(data: GetApiContractServiceRebateTableHeadersByIdData): CancelablePromise<GetApiContractServiceRebateTableHeadersByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/contract-service/rebate-table-headers/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public putApiContractServiceRebateTableHeadersById(data: PutApiContractServiceRebateTableHeadersByIdData): CancelablePromise<PutApiContractServiceRebateTableHeadersByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/contract-service/rebate-table-headers/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.isTemplate
     * @param data.sorting
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiContractServiceRebateTableHeaders(data: GetApiContractServiceRebateTableHeadersData = {}): CancelablePromise<GetApiContractServiceRebateTableHeadersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/contract-service/rebate-table-headers',
            query: {
                IsTemplate: data.isTemplate,
                Sorting: data.sorting,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiContractServiceRebateTableHeaders(data: PostApiContractServiceRebateTableHeadersData = {}): CancelablePromise<PostApiContractServiceRebateTableHeadersResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/contract-service/rebate-table-headers',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.isTemplate
     * @param data.merchantId
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiContractServiceRebateTableHeadersCloneById(data: PostApiContractServiceRebateTableHeadersCloneByIdData): CancelablePromise<PostApiContractServiceRebateTableHeadersCloneByIdResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/contract-service/rebate-table-headers/clone/{id}',
            path: {
                id: data.id
            },
            query: {
                isTemplate: data.isTemplate,
                merchantId: data.merchantId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
}

export class RefundFeeHeaderService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.refundPointId
     * @param data.sorting
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiContractServiceRefundFeeHeadersAssignablesByRefundPoint(data: GetApiContractServiceRefundFeeHeadersAssignablesByRefundPointData): CancelablePromise<GetApiContractServiceRefundFeeHeadersAssignablesByRefundPointResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/contract-service/refund-fee-headers/assignables-by-refund-point',
            query: {
                refundPointId: data.refundPointId,
                sorting: data.sorting
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiContractServiceRefundFeeHeadersById(data: GetApiContractServiceRefundFeeHeadersByIdData): CancelablePromise<GetApiContractServiceRefundFeeHeadersByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/contract-service/refund-fee-headers/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public putApiContractServiceRefundFeeHeadersById(data: PutApiContractServiceRefundFeeHeadersByIdData): CancelablePromise<PutApiContractServiceRefundFeeHeadersByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/contract-service/refund-fee-headers/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.isTemplate
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiContractServiceRefundFeeHeaders(data: GetApiContractServiceRefundFeeHeadersData = {}): CancelablePromise<GetApiContractServiceRefundFeeHeadersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/contract-service/refund-fee-headers',
            query: {
                IsTemplate: data.isTemplate,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiContractServiceRefundFeeHeaders(data: PostApiContractServiceRefundFeeHeadersData = {}): CancelablePromise<PostApiContractServiceRefundFeeHeadersResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/contract-service/refund-fee-headers',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.isTemplate
     * @param data.refundPointId
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiContractServiceRefundFeeHeadersCloneById(data: PostApiContractServiceRefundFeeHeadersCloneByIdData): CancelablePromise<PostApiContractServiceRefundFeeHeadersCloneByIdResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/contract-service/refund-fee-headers/clone/{id}',
            path: {
                id: data.id
            },
            query: {
                isTemplate: data.isTemplate,
                refundPointId: data.refundPointId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
}

export class RefundTableHeaderService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * @param data The data for the request.
     * @param data.merchantId
     * @param data.sorting
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiContractServiceRefundTableHeadersAssignablesByMerchant(data: GetApiContractServiceRefundTableHeadersAssignablesByMerchantData): CancelablePromise<GetApiContractServiceRefundTableHeadersAssignablesByMerchantResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/contract-service/refund-table-headers/assignables-by-merchant',
            query: {
                merchantId: data.merchantId,
                sorting: data.sorting
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiContractServiceRefundTableHeadersById(data: GetApiContractServiceRefundTableHeadersByIdData): CancelablePromise<GetApiContractServiceRefundTableHeadersByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/contract-service/refund-table-headers/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public putApiContractServiceRefundTableHeadersById(data: PutApiContractServiceRefundTableHeadersByIdData): CancelablePromise<PutApiContractServiceRefundTableHeadersByIdResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/contract-service/refund-table-headers/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.isTemplate
     * @param data.skipCount
     * @param data.maxResultCount
     * @returns unknown Success
     * @throws ApiError
     */
    public getApiContractServiceRefundTableHeaders(data: GetApiContractServiceRefundTableHeadersData = {}): CancelablePromise<GetApiContractServiceRefundTableHeadersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/contract-service/refund-table-headers',
            query: {
                IsTemplate: data.isTemplate,
                SkipCount: data.skipCount,
                MaxResultCount: data.maxResultCount
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiContractServiceRefundTableHeaders(data: PostApiContractServiceRefundTableHeadersData = {}): CancelablePromise<PostApiContractServiceRefundTableHeadersResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/contract-service/refund-table-headers',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.isTemplate
     * @param data.merchantId
     * @returns unknown Success
     * @throws ApiError
     */
    public postApiContractServiceRefundTableHeadersCloneById(data: PostApiContractServiceRefundTableHeadersCloneByIdData): CancelablePromise<PostApiContractServiceRefundTableHeadersCloneByIdResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/contract-service/refund-table-headers/clone/{id}',
            path: {
                id: data.id
            },
            query: {
                isTemplate: data.isTemplate,
                merchantId: data.merchantId
            },
            errors: {
                400: 'Bad Request',
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not Found',
                500: 'Server Error',
                501: 'Server Error'
            }
        });
    }
    
}